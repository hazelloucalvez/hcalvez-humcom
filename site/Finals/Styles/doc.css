 CREATE OR REPLACE TRIGGER PayHist_Trig_Update AFTER
UPDATE OF BOCConfirmDate, BOCConfirmID, BOCConfirmRecvDate, BOCStat ON HISTORICALPAYTRANSACTIONS
REFERENCING NEW as new OLD as old FOR EACH ROW

DECLARE
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   v_TxnType varchar2(1) := NULL;
   v_rate number(7,2) := 0;
   v_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE; -- (added)
BEGIN
   -- (added) start
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE INTO v_SERVER_TYPE
             FROM H2H_SERVERS WHERE BANK_CODE=SUBSTR(:new.BRSTN,3,3) AND ACTIVE_SERVER='Y';
   EXCEPTION WHEN NO_DATA_FOUND THEN
      v_SERVER_TYPE:=NULL;
   END;
   -- (added) end
   v_NewFields := TO_CHAR(:new.PAYTRANID) ||'^'|| :new.AABREFNO ||'^'|| :new.BRSTN ||'^'|| :new.IMPORTENTRYDECNO ||'^'|| :new.CUSTOMSCLIENTNO ||'^'|| TO_CHAR(:new.ADVANCEDUTYAMOUNT);
   v_NewFields := v_NewFields ||'^'|| :new.PAYMENTMODE ||'^'|| :new.BOCTRANID ||'^'|| TO_CHAR(:new.CASHPAYMENTAMOUNTOFDUTY) ||'^'|| TO_CHAR(:new.CASHPAYMENTAMOUNTOFTAX);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.CASHPAYMENTAMOUNTOFOTHCHARGES) ||'^'|| TO_CHAR(:new.CASHPAYMENTAMOUNTOFIPF) ||'^'|| TO_CHAR(:new.REQUESTRECVDATE);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.AABCOLLECTIONDATE) ||'^'|| :new.RECORDSTAT ||'^'|| :new.AABMAKERID ||'^'|| TO_CHAR(:new.AABMAKERTIMESTAMP);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.AABMAKERCONFIRMID) ||'^'|| :new.AABAUTHORIZERID ||'^'|| TO_CHAR(:new.AABAUTHORIZERTIMESTAMP);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.AABAUTHORIZERCONFIRMID) ||'^'|| :new.AUTHORIZERACTION ||'^'|| TO_CHAR(:new.COLLECTEDAMT);
   v_NewFields := v_NewFields ||'^'|| :new.LETTEROFCREDITNO ||'^'|| TO_CHAR(:new.BOCConfirmDate) ||'^'|| :new.BOCConfirmID ||'^'|| TO_CHAR(:new.BOCConfirmRecvDate) ||'^'|| :new.BOCStat;

   INSERT INTO EVENTLOG (Initiator,
                         UserGroup,
                         ActionClass,
                         Action,
                         ActionDetails,
                         EventTimeStamp,
                         IPAddress,
                         OldFieldValues,
                         NewFieldValues)
                 VALUES ('SYSTEM',
                         'PCHC',
                         'TRANSACTION',
                         'EDIT',
                         'HISTORICALPAYTRANSACTIONS RECORD MODIFIED. COMFIRMATION ID FROM '||NVL(:old.BOCConfirmID,'SentToBOC')||' TO '||:new.BOCConfirmID||' AND STATUS FROM '||NVL(:old.BOCStat,'none')||' TO '||:new.BOCStat,
                         SYSDATE,
                         '',
                         v_OldFields,
                         v_NewFields);

   IF TRIM(:new.BOCStat) = 'OK' THEN
      IF TRIM(:new.MESSAGECODE) = 'IEDPayment' THEN
         v_TxnType := '3';
      ELSE
         v_TxnType := '2';
      END IF;

      select SOA_RATE_CONFIRMED into v_rate from SystemParameters where rownum=1;

      INSERT INTO STATFILE (TRANDATE,
                            RECTRANID,
                            AABREFNO,
                            BRSTN,
                            REFDOC,
                            ADVDUTYAMT,
                            FINALPAYAMT,
                            FINALDUTY,
                            FINALTAX,
                            FINALOTHCHARGE,
                            FINALIPF,
                            TXNTYPE,
                            SOATRANSACTIONRATE,
                            BOCCONFIRMCODE)
                    VALUES (TRUNC(:new.AABCollectionDate),
                            :new.PayTranID,
                            :new.AABRefNo,
                            :new.BRSTN,
                            :new.ImportEntryDecNo,
                            :new.AdvanceDutyAmount,
                            (:new.CashPaymentAmountOfDuty+:new.CashPaymentAmountOfTax+:new.CashPaymentAmountOfOthCharges+:new.CashPaymentAmountOfIPF),
                            :new.CashPaymentAmountOfDuty,
                            :new.CashPaymentAmountOfTax,
                            :new.CashPaymentAmountOfOthCharges,
                            :new.CashPaymentAmountOfIPF,
                            v_TxnType,
                            v_rate,
                            '1');
      -- (added) start
      IF v_SERVER_TYPE IS NOT NULL THEN
         pass.p5_mh2h.set_H2H_SERVERS_NEW_STATUS(:new.PayTranID,SUBSTR(:new.BRSTN,3,3),'OK',NULL);
      END IF;
      -- (added) end
   ELSIF TRIM(:new.BOCStat) = 'FALSE' THEN
      IF TRIM(:new.MESSAGECODE) = 'IEDPayment' THEN
         v_TxnType := '3';
      ELSE
         v_TxnType := '2';
      END IF;

      select SOA_RATE_REJECTED into v_rate from SystemParameters where rownum=1;
      INSERT INTO STATFILE (TRANDATE,
                            RECTRANID,
                            AABREFNO,
                            BRSTN,
                            REFDOC,
                            ADVDUTYAMT,
                            FINALPAYAMT,
                            FINALDUTY,
                            FINALTAX,
                            FINALOTHCHARGE,
                            FINALIPF,
                            TXNTYPE,
                            SOATRANSACTIONRATE,
                            BOCCONFIRMCODE)
                    VALUES (TRUNC(:new.AABCollectionDate),
                            :new.PayTranID,
                            :new.AABRefNo,
                            :new.BRSTN,
                            :new.ImportEntryDecNo,
                            :new.AdvanceDutyAmount,
                            (:new.CashPaymentAmountOfDuty+:new.CashPaymentAmountOfTax+:new.CashPaymentAmountOfOthCharges+:new.CashPaymentAmountOfIPF),
                            :new.CashPaymentAmountOfDuty,
                            :new.CashPaymentAmountOfTax,
                            :new.CashPaymentAmountOfOthCharges,
                            :new.CashPaymentAmountOfIPF,
                            v_TxnType,
                            v_rate,
                            '0');
      -- (added) start
      IF v_SERVER_TYPE IS NOT NULL THEN
         pass.p5_mh2h.set_H2H_SERVERS_NEW_STATUS(:new.PayTranID,SUBSTR(:new.BRSTN,3,3),'RB',:new.ERRORMSG);
      END IF;
      -- (added) end
   END IF;
END;
/
CREATE OR REPLACE TRIGGER PayHist_Trig_Update_PCHCsDate AFTER
UPDATE OF PCHCSentDate ON HISTORICALPAYTRANSACTIONS
REFERENCING NEW as new OLD as old FOR EACH ROW

DECLARE
   v_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE;
BEGIN
   IF :new.PCHCSentDate IS NOT NULL AND :new.BOCConfirmID IS NULL THEN
      BEGIN
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE INTO v_SERVER_TYPE
                FROM H2H_SERVERS WHERE BANK_CODE=SUBSTR(:new.BRSTN,3,3) AND ACTIVE_SERVER='Y';
      EXCEPTION WHEN NO_DATA_FOUND THEN
         v_SERVER_TYPE:=NULL;
      END;
      IF v_SERVER_TYPE IS NOT NULL THEN
         pass.p5_mh2h.set_H2H_SERVERS_NEW_STATUS(:new.PayTranID,SUBSTR(:new.BRSTN,3,3),'SB',NULL);
      END IF;
   END IF;
END;
/


CREATE OR REPLACE TRIGGER PayTrans_Trig_AfterInsert AFTER
INSERT ON PAYMENTTRANSACTIONS
REFERENCING NEW as new OLD as old FOR EACH ROW

DECLARE
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   v_BANK_CODE H2H_SERVERS.BANK_CODE%TYPE;
BEGIN
   v_NewFields := TO_CHAR(:new.PayTranID) ||'^'|| :new.AABRefNo ||'^'|| :new.BRSTN ||'^'|| :new.ImportEntryDecNo ||'^'|| :new.CustomsClientNo;
   v_NewFields := v_NewFields ||'^'|| :new.ImporterTaxpayerIDNo ||'^'|| :new.BrokerTaxpayerIDNo ||'^'|| :new.ImporterVASPID ||'^'|| :new.PCHCVASPID;
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.ShipmentTransactionValue) ||'^'|| :new.TaxExemptionCertificateNo ||'^'|| :new.TaxDebitMemoNo;
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.AdvanceDutyAmount) ||'^'|| :new.PaymentMode ||'^'|| TO_CHAR(:new.ExpirationDate);
   v_NewFields := v_NewFields ||'^'|| :new.BOCTranID ||'^'|| :new.MessageCode ||'^'|| :new.PortOfEntryCode ||'^'|| TO_CHAR(:new.CashPaymentAmountOfDuty);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.CashPaymentAmountOfTax) ||'^'|| TO_CHAR(:new.CashPaymentAmountOfOthCharges);
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.RequestRecvDate) ||'^'|| :new.LetterOfCreditNo ||'^'|| TO_CHAR(:new.CashPaymentAmountOfIPF);

   INSERT INTO EVENTLOG (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress,OldFieldValues,NewFieldValues)
        VALUES ('BOC','PCHC', 'TRANSACTION', 'ADD',
        'INITIATED NEW RECORD FROM PAYMENTTRANSACTIONS. UPDATED BY: BOC', SYSDATE, '', v_OldFields, v_NewFields);
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ BANK_CODE INTO v_BANK_CODE
             FROM H2H_SERVERS WHERE BANK_CODE=SUBSTR(:NEW.BRSTN,3,3) AND ACTIVE_SERVER='Y';
   EXCEPTION WHEN NO_DATA_FOUND THEN
      v_BANK_CODE:=NULL;
   END;
   IF v_BANK_CODE IS NOT NULL THEN
      INSERT INTO XMLMANAGER_INCOMING(TRANTYPE,TRANID,BANK_CODE,FILENAME)
             VALUES(DECODE(:NEW.MessageCode,'Payment','P','I'),:NEW.PayTranId,v_BANK_CODE,:NEW.BOCTranId);
   END IF;
END;
/
CREATE OR REPLACE TRIGGER Abandonments_Trig_AfterInsert AFTER
INSERT ON Abandonments
REFERENCING NEW as new OLD as old FOR EACH ROW

DECLARE
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   v_BANK_CODE H2H_SERVERS.BANK_CODE%TYPE;
BEGIN
   v_NewFields := TO_CHAR(:new.AbandonmentTranId) ||'^'|| :new.ManifestNo ||'^'|| :new.BLReferenceNo ||'^'|| :new.ImportEntryDecNo;
   v_NewFields := v_NewFields ||'^'|| TO_CHAR(:new.IEDRegistrationDate) ||'^'|| TO_CHAR(:new.IEDAssessdate) ||'^'|| :new.CustomsClientNumber;
   v_NewFields := v_NewFields ||'^'|| :new.ImporterTaxPayerIdNo ||'^'|| :new.AABRefNo ||'^'|| :new.BRSTN ||'^'|| TO_CHAR(:new.AbandonmentRecvDate);

   INSERT INTO EVENTLOG (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress,OldFieldValues,NewFieldValues)
        VALUES ('BOC','PCHC', 'TRANSACTION', 'ADD',
        'INITIATED NEW RECORD FROM ABANDONMENTS. UPDATED BY: BOC', SYSDATE, '', v_OldFields, v_NewFields);
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ BANK_CODE INTO v_BANK_CODE
             FROM H2H_SERVERS WHERE BANK_CODE=SUBSTR(:NEW.BRSTN,3,3) AND ACTIVE_SERVER='Y';
   EXCEPTION WHEN NO_DATA_FOUND THEN
      v_BANK_CODE:=NULL;
   END;
   IF v_BANK_CODE IS NOT NULL THEN
      INSERT INTO XMLMANAGER_INCOMING(TRANTYPE,TRANID,BANK_CODE,FILENAME)
             VALUES('A',:NEW.AbandonmentTranId,v_BANK_CODE,:NEW.BOCTranId);
   END IF;
END;
/
CREATE OR REPLACE TRIGGER XMLManager_File_Trig_B4Insert
BEFORE INSERT ON XMLManager_File
REFERENCING NEW as new OLD as old FOR EACH ROW
DECLARE
   m_TASK_ID pass.H2H_SERVERS_TASK.TASK_ID%TYPE;
   m_FILETYPE VARCHAR2(2);
BEGIN
   p5_mh2h.ADD_H2H_SERVERS_TASK(:NEW.BANK_CODE,'X',m_TASK_ID);
   IF :NEW.TRANTYPE='A' THEN
      m_FILETYPE:='AB';
   ELSIF :NEW.TRANTYPE='P' THEN
      m_FILETYPE:='FP';
   ELSE
      m_FILETYPE:='AP';
   END IF;
   :NEW.FILENAME:=m_FILETYPE||TO_CHAR(:NEW.TRANID)||TO_CHAR(:NEW.FILEDATE,'MMDDYYYY');
END;
/
CREATE OR REPLACE TRIGGER AABUserType_Trig_B4Insert BEFORE
INSERT ON AABUSERTYPE
REFERENCING NEW as new OLD as old FOR EACH ROW
BEGIN
   IF :new.UserTypeDesc='Host-to-Host' THEN -- (added)
      :new.VirtualName := 'bank/h2h'; -- (added)
   ELSE -- (added)
      :new.VirtualName := LOWER(REPLACE(:new.UserTypeDesc,'-','/'));
   END IF; -- (added)
END;
/
Insert into AABUserType(USERTYPEGRP,USERTYPEDESC,USERMAXCOUNT,USERTHRESHOLDCOUNT,ROLECODE) Values('BAP','Host-to-Host',36,30,'X')
/
COMMIT
/
CREATE OR REPLACE FUNCTION AABUSERS_BANKROLE(USERID IN VARCHAR2) RETURN VARCHAR2 IS
TEMPCODE VARCHAR2(1);
BEGIN
   IF USERID IS NOT NULL THEN
      IF LENGTH(USERID)>3 THEN
         TEMPCODE:=UPPER(SUBSTR(USERID,3,1));
         IF TEMPCODE='A' THEN
            RETURN 'pass_baadm';
         ELSIF TEMPCODE='B' THEN
            RETURN 'pass_baapp';
         ELSIF TEMPCODE='C' THEN
            RETURN 'pass_baofc';
         ELSIF TEMPCODE='D' THEN
            RETURN 'pass_bradm';
         ELSIF TEMPCODE='E' THEN
            RETURN 'pass_brapp';
         ELSIF TEMPCODE='F' THEN
            RETURN 'pass_brofc';
         ELSIF TEMPCODE='G' THEN
            RETURN 'pass_maker';
         ELSIF TEMPCODE='H' THEN
            RETURN 'pass_authr';
         ELSIF TEMPCODE='I' THEN
            RETURN 'pass_adm';
         ELSIF TEMPCODE='K' THEN
            RETURN 'pass_oper';
         ELSIF TEMPCODE='L' THEN
            RETURN 'pass_bocs';
         ELSIF TEMPCODE='X' THEN
            RETURN 'pass_h2h';
         ELSE
            RETURN 'unknown';
         END IF;
      ELSE
         RETURN 'short';
      END IF;
   ELSE
      RETURN 'null';
   END IF;
END;
/
CREATE OR REPLACE PACKAGE p5_mh2h
AS

   PROCEDURE
      update_H2H_SERVERS_TASK;

   FUNCTION
      get_active_H2H_SERVERS(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_REPORT_BANK_CODES(in_DATE IN DATE) RETURN types.ref_cursor;

   FUNCTION
      get_PENDING_REPORT_DATES RETURN types.ref_cursor;

   FUNCTION
      get_REPORT_DATA(in_BANK_CODE IN pass.H2H_SERVERS_PAY_CONFIRMED.BANK_CODE%TYPE,
                      in_DATE IN DATE) RETURN types.ref_cursor;

   PROCEDURE
      set_CREATED_REPORT_DATE(in_KEY_DATE IN pass.H2H_DAILY_KEY.KEY_DATE%TYPE,
                              in_REPORT_CREATED IN pass.H2H_DAILY_KEY.REPORT_CREATED%TYPE);

   PROCEDURE
      get_H2H_SERVERS_SESSION_ID(in_ORIGIN IN pass.H2H_SERVERS_SESSION.ORIGIN%TYPE,
                                 in_IP_ADDR IN pass.H2H_SERVERS_SESSION.IP_ADDR%TYPE,
                                 in_PORT IN pass.H2H_SERVERS_SESSION.PORT%TYPE,
                                 in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                                 out_SESSION_ID OUT pass.H2H_SERVERS_SESSION.SESSION_ID%TYPE);

   PROCEDURE
      add_H2H_SERVERS_SESSION_LOG(in_SESSION_ID IN pass.H2H_SERVERS_SESSION_LOG.SESSION_ID%TYPE,
                                  in_LOG_TYPE IN pass.H2H_SERVERS_SESSION_LOG.LOG_TYPE%TYPE,
                                  in_TEXT IN VARCHAR2);

   PROCEDURE
      end_H2H_SERVERS_SESSION(in_SESSION_ID IN pass.H2H_SERVERS_SESSION.SESSION_ID%TYPE,
                              in_STATUS IN pass.H2H_SERVERS_SESSION.STATUS%TYPE);

   FUNCTION
      get_PaymentTransactions_Info(in_PayTranId IN PaymentTransactions.PayTranId%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_LATEST_DAILY_KEY RETURN types.ref_cursor;

   FUNCTION
      get_DAILY_KEY(in_DATE IN DATE) RETURN VARCHAR2;

   FUNCTION
      get_EMAIL_SETTING RETURN types.ref_cursor;

   PROCEDURE
      add_H2H_SERVERS_ALERT(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                            in_ALERT_TYPE IN pass.H2H_SERVERS_ALERT.ALERT_TYPE%TYPE,
                            in_SUBJECT IN pass.H2H_SERVERS_ALERT.SUBJECT%TYPE,
                            in_ALERT IN pass.H2H_SERVERS_ALERT.ALERT%TYPE,
                            out_ALERT_ID OUT pass.H2H_SERVERS_ALERT.ALERT_ID%TYPE);

   FUNCTION
      get_H2H_SERVERS_ALERT RETURN types.ref_cursor;

   PROCEDURE
      add_H2H_SERVERS_ALERT_LOG(in_ALERT_ID IN pass.H2H_SERVERS_ALERT.ALERT_ID%TYPE,
                                in_LOG_TEXT IN pass.H2H_SERVERS_ALERT_LOG.LOG_TEXT%TYPE);

   FUNCTION
      get_XMLMANAGER_FILE(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                          in_TRANID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                          in_BANK_CODE IN pass.XMLMANAGER_FILE.BANK_CODE%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_BANK_XMLMANAGER_FILE(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE)
                                            RETURN types.ref_cursor;

   FUNCTION
      get_BANK_SECRET_KEY(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE)
                                       RETURN H2H_SERVERS.SECRET_KEY%TYPE;

   PROCEDURE
      set_XMLMANAGER_FILE_STATUS(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                                 in_TRANID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                                 in_STATUS IN pass.XMLMANAGER_FILE.STATUS%TYPE);

   FUNCTION
      get_H2H_SERVERS_BANK_REPORT(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE)
                                               RETURN types.ref_cursor;

   FUNCTION
      get_H2H_SERVERS_REPORT(in_RPTID IN pass.H2H_SERVERS_REPORT.RPTID%TYPE,
                             in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE) RETURN types.ref_cursor;

   PROCEDURE
      add_H2H_SERVERS_REPORT(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE,
                             in_RPT_DATE IN pass.H2H_SERVERS_REPORT.RPT_DATE%TYPE,
                             in_FILENAME IN pass.H2H_SERVERS_REPORT.FILENAME%TYPE,
                             in_FILEHASHVALUE IN pass.H2H_SERVERS_REPORT.FILEHASHVALUE%TYPE,
                             in_GZIPBLOBFILE IN pass.H2H_SERVERS_REPORT.GZIPBLOBFILE%TYPE,
                             out_RPTID OUT pass.H2H_SERVERS_REPORT.RPTID%TYPE);

   PROCEDURE
      set_H2H_SERVERS_REPORT_STATUS(in_RPTID IN pass.H2H_SERVERS_REPORT.RPTID%TYPE,
                                    in_STATUS IN pass.H2H_SERVERS_REPORT.STATUS%TYPE);

   FUNCTION
      get_H2H_SERVERS_STATUS(in_BANK_CODE IN pass.H2H_SERVERS_STATUS.BANK_CODE%TYPE)
                                          RETURN types.ref_cursor;

   PROCEDURE
      set_H2H_SERVERS_STATUS_STATUS(in_PAYTRANID IN pass.H2H_SERVERS_STATUS.PAYTRANID%TYPE,
                                    in_STATUS IN pass.H2H_SERVERS_STATUS.STATUS%TYPE);

   PROCEDURE
      set_H2H_SERVERS_NEW_STATUS(in_PAYTRANID IN pass.H2H_SERVERS_STATUS.PAYTRANID%TYPE,
                                 in_BANK_CODE IN H2H_SERVERS_STATUS.BANK_CODE%TYPE,
                                 in_NEW_STATUS IN pass.H2H_SERVERS_STATUS.NEW_STATUS%TYPE,
                                 in_REJECT_REASON IN pass.H2H_SERVERS_STATUS.REJECT_REASON%TYPE);

   FUNCTION
      get_H2H_SERVERS_BANK_TASK RETURN types.ref_cursor;

   FUNCTION
      get_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                           in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE) RETURN types.ref_cursor;

   PROCEDURE
      set_H2H_SERVERS_TASK_STATUS(in_TASK_ID IN pass.H2H_SERVERS_TASK.TASK_ID%TYPE,
                           in_SESSION_ID IN pass.H2H_SERVERS_TASK_LOG.SESSION_ID%TYPE,
                           in_STATUS IN pass.H2H_SERVERS_TASK.STATUS%TYPE,
                           in_ATTEMPTS IN pass.H2H_SERVERS_TASK.ATTEMPTS%TYPE,
                           in_TEXT IN VARCHAR2);

   PROCEDURE
       Update_H2H_SERVERS_ATTEMPTS(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                                   in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE,
                                   in_CONN_ATTEMPTS IN pass.H2H_SERVERS.CONN_ATTEMPTS%TYPE);

   PROCEDURE
       ALL_H2H_SERVERS_TASK(in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE);

   PROCEDURE
       CREATE_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                               in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE,
                               in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE,
                               out_TASK_ID OUT pass.H2H_SERVERS_TASK.TASK_ID%TYPE);

   PROCEDURE
       ADD_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                            in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE,
                            out_TASK_ID OUT pass.H2H_SERVERS_TASK.TASK_ID%TYPE);

   FUNCTION
       IS_TASK_AVAILABLE(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                         in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE) RETURN VARCHAR2;

   PROCEDURE
      verify_Payment_Validation(in_TRAN_TYPE IN H2H_SERVERS_VALIDATE.TRAN_TYPE%TYPE,
                                in_TRAN_ID IN H2H_SERVERS_VALIDATE.TRAN_ID%TYPE,
                                in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                in_CUSTOMSCLIENTNO IN PaymentTransactions.CUSTOMSCLIENTNO%TYPE,
                                in_Status IN VARCHAR2,
                                in_INVALID_REASON IN H2H_SERVERS_VALIDATE.INVALID_REASON%TYPE,
                                out_Result OUT VARCHAR2);

   PROCEDURE
      verify_Payment_Confirmation(in_PayTranId IN PaymentTransactions.PayTranId%TYPE,
                                  in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                  in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                  out_Result OUT VARCHAR2);

   PROCEDURE
      process_Payment_Confirmation(in_PayTranId IN PaymentTransactions.PayTranId%TYPE,
                                   in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                   in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                   in_AABCollectionDate IN PaymentTransactions.AABCollectionDate%TYPE,
                                   in_LetterOfCreditNo IN PaymentTransactions.LetterOfCreditNo%TYPE,
                                   in_SESSION_ID IN H2H_SERVERS_SESSION.SESSION_ID%TYPE,
                                   in_BANK_CODE IN H2H_SERVERS_PAY_CONFIRMED.BANK_CODE%TYPE,
                                   out_Result OUT VARCHAR2,
                                   out_Approve OUT types.ref_cursor);

END p5_mh2h;
/
CREATE OR REPLACE PACKAGE BODY p5_mh2h
AS
   PROCEDURE
      update_H2H_SERVERS_TASK
   IS
   CURSOR CSRSTAT IS
      SELECT /*+ INDEX(A H2H_SERVERS_PK) */ A.BANK_CODE,A.SERVER_TYPE
           FROM H2H_SERVERS A WHERE A.ACTIVE_SERVER='Y' AND EXISTS(
                SELECT /*+ INDEX(B H2H_SERVERS_STATUS_NDX) */ B.BANK_CODE
                FROM H2H_SERVERS_STATUS B WHERE B.BANK_CODE=A.BANK_CODE AND B.STATUS='N');
   CURSOR CSRXML IS
      SELECT /*+ INDEX(A H2H_SERVERS_PK) */ A.BANK_CODE,A.SERVER_TYPE
           FROM H2H_SERVERS A WHERE A.ACTIVE_SERVER='Y' AND EXISTS(
                SELECT /*+ INDEX(B XMLMANAGER_FILE_NDX) */ B.BANK_CODE
                FROM XMLMANAGER_FILE B WHERE B.BANK_CODE=A.BANK_CODE AND B.STATUS='N');
   m_ROWS NUMBER:=0;
   m_STATUS H2H_SERVERS_TASK.STATUS%TYPE;
   BEGIN
      FOR COLSTAT IN CSRSTAT LOOP
         BEGIN
            SELECT /*+ INDEX(A H2H_SERVERS_TASK_PK) */ A.STATUS INTO m_STATUS
               FROM H2H_SERVERS_TASK A WHERE A.TASK_ID=(SELECT /*+ INDEX(B H2H_SERVERS_TASK_NDX1) */ MAX(B.TASK_ID) TASK_ID
               FROM H2H_SERVERS_TASK B WHERE B.TASK='S' AND B.BANK_CODE=COLSTAT.BANK_CODE AND B.SERVER_TYPE=COLSTAT.SERVER_TYPE);
         EXCEPTION WHEN NO_DATA_FOUND THEN
            m_STATUS:=NULL;
         END;
         IF m_STATUS IS NOT NULL THEN
            IF m_STATUS='F' THEN
               INSERT INTO H2H_SERVERS_TASK(TASK_ID,BANK_CODE,SERVER_TYPE,TASK)
                      VALUES(H2H_SEQ.NEXTVAL,COLSTAT.BANK_CODE,COLSTAT.SERVER_TYPE,'S');
               m_ROWS:=m_ROWS+SQL%ROWCOUNT;
            END IF;
         END IF;
      END LOOP;
      FOR COLXML IN CSRXML LOOP
         BEGIN
            SELECT /*+ INDEX(A H2H_SERVERS_TASK_PK) */ A.STATUS INTO m_STATUS
               FROM H2H_SERVERS_TASK A WHERE A.TASK_ID=(SELECT /*+ INDEX(B H2H_SERVERS_TASK_NDX1) */ MAX(B.TASK_ID) TASK_ID
               FROM H2H_SERVERS_TASK B WHERE B.TASK='X' AND B.BANK_CODE=COLXML.BANK_CODE AND B.SERVER_TYPE=COLXML.SERVER_TYPE);
         EXCEPTION WHEN NO_DATA_FOUND THEN
            m_STATUS:=NULL;
         END;
         IF m_STATUS IS NOT NULL THEN
            IF m_STATUS='F' THEN
               INSERT INTO H2H_SERVERS_TASK(TASK_ID,BANK_CODE,SERVER_TYPE,TASK)
                      VALUES(H2H_SEQ.NEXTVAL,COLXML.BANK_CODE,COLXML.SERVER_TYPE,'X');
               m_ROWS:=m_ROWS+SQL%ROWCOUNT;
            END IF;
         END IF;
      END LOOP;
      IF m_ROWS>0 THEN
         COMMIT;
      END IF;
   END update_H2H_SERVERS_TASK;

   FUNCTION
      get_active_H2H_SERVERS(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE,
                PUBLIC_IP,PORT,MAC_ADDRESS,EMAIL_ALERT,MOBILE_ALERT,CONN_ATTEMPTS,LAST_CONN_FAILED
                FROM H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND ACTIVE_SERVER='Y' AND SERVER_STATUS='Y';
      RETURN m_cursor;
   END get_active_H2H_SERVERS;

   FUNCTION
      get_REPORT_BANK_CODES(in_DATE IN DATE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(A BANKLIST_PK) INDEX(B H2H_SERVERS_PK) INDEX(C H2H_DAILY_KEY_PK) */ A.BANKCODE,A.BANKNAME,
                B.SECRET_KEY,C.KEY_VALUE FROM BANKLIST A,H2H_SERVERS B,H2H_DAILY_KEY C WHERE
                B.BANK_CODE=A.BANKCODE AND B.ACTIVE_SERVER='Y' AND C.KEY_DATE=TRUNC(in_DATE) AND EXISTS(
                SELECT /*+ INDEX(H2H_SERVERS_PAY_CONFIRMED H2H_SERVERS_PAY_CONFIRMED_NDX) */ BANK_CODE
                       FROM H2H_SERVERS_PAY_CONFIRMED  WHERE TRUNC(DATE_CONFIRMED)=TRUNC(in_DATE) AND BANK_CODE=A.BANKCODE)
                ORDER BY A.BANKCODE;
      RETURN m_cursor;
   END get_REPORT_BANK_CODES;

   FUNCTION
      get_PENDING_REPORT_DATES RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_DAILY_KEY H2H_DAILY_KEY_NDX) */ KEY_DATE
                FROM H2H_DAILY_KEY WHERE REPORT_CREATED='N' ORDER BY KEY_DATE;
      RETURN m_cursor;
   END get_PENDING_REPORT_DATES;

   FUNCTION
      get_REPORT_DATA(in_BANK_CODE IN pass.H2H_SERVERS_PAY_CONFIRMED.BANK_CODE%TYPE,
                      in_DATE IN DATE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_PAY_CONFIRMED H2H_SERVERS_PAY_CONFIRMED_NDX) INDEX(B HistoricalPayTransactions_PK) INDEX(C Enrollment_NDX) */ B.ImportEntryDecNo,
                B.AABRefNo,C.ImporterName,B.ShipmentTransactionValue,DECODE(B.PaymentMode,NULL,'Final','Advance') PaymentMode,B.LetterOfCreditNo,
                pass.p5_m7ph.get_status2(B.PCHCSentDate,B.BOCConfirmID,B.ErrorMsg) BOCStat,B.BOCConfirmDate,
                B.CashPaymentAmountOfDuty,B.CashPaymentAmountOfTax,B.CashPaymentAmountOfOthCharges,B.CashPaymentAmountOfIPF
                FROM pass.H2H_SERVERS_PAY_CONFIRMED A,pass.HistoricalPayTransactions B,pass.Enrollment C
                WHERE A.BANK_CODE=in_BANK_CODE AND TRUNC(A.DATE_CONFIRMED)=TRUNC(in_DATE)
                AND B.PayTranId=A.PayTranId AND C.AABRefNo(+)=B.AABRefNo AND C.ForDeletion IS NULL
                ORDER BY PaymentMode,B.AABAuthorizerTimestamp;
      RETURN m_cursor;
   END get_REPORT_DATA;
   
   PROCEDURE
      set_CREATED_REPORT_DATE(in_KEY_DATE IN pass.H2H_DAILY_KEY.KEY_DATE%TYPE,
                              in_REPORT_CREATED IN pass.H2H_DAILY_KEY.REPORT_CREATED%TYPE)
   AS
   BEGIN
      UPDATE /*+ INDEX(H2H_DAILY_KEY H2H_DAILY_KEY_PK) */ H2H_DAILY_KEY
             SET REPORT_CREATED=in_REPORT_CREATED WHERE KEY_DATE=in_KEY_DATE;
      IF in_REPORT_CREATED='Y' THEN
         ALL_H2H_SERVERS_TASK('R');
      END IF;
   END set_CREATED_REPORT_DATE;

   PROCEDURE
      get_H2H_SERVERS_SESSION_ID(in_ORIGIN IN pass.H2H_SERVERS_SESSION.ORIGIN%TYPE,
                                 in_IP_ADDR IN pass.H2H_SERVERS_SESSION.IP_ADDR%TYPE,
                                 in_PORT IN pass.H2H_SERVERS_SESSION.PORT%TYPE,
                                 in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                                 out_SESSION_ID OUT pass.H2H_SERVERS_SESSION.SESSION_ID%TYPE)
   AS
   BEGIN
      INSERT INTO H2H_SERVERS_SESSION(SESSION_ID,ORIGIN,IP_ADDR,PORT,BANK_CODE)
             VALUES(H2H_SEQ.NEXTVAL,in_ORIGIN,in_IP_ADDR,in_PORT,in_BANK_CODE)
             RETURNING SESSION_ID INTO out_SESSION_ID;
   END get_H2H_SERVERS_SESSION_ID;

   PROCEDURE
      add_H2H_SERVERS_SESSION_LOG(in_SESSION_ID IN pass.H2H_SERVERS_SESSION_LOG.SESSION_ID%TYPE,
                                  in_LOG_TYPE IN pass.H2H_SERVERS_SESSION_LOG.LOG_TYPE%TYPE,
                                  in_TEXT IN VARCHAR2)
   IS
   m_LOG_TEXT pass.H2H_SERVERS_SESSION_LOG.LOG_TEXT%TYPE;
   BEGIN
      IF in_TEXT IS NULL THEN
         m_LOG_TEXT:=NULL;
      ELSE
         IF LENGTH(in_TEXT)>255 THEN
            m_LOG_TEXT:=SUBSTR(in_TEXT,1,252)||'...';
         ELSE
            m_LOG_TEXT:=in_TEXT;
         END IF;
      END IF;
      INSERT INTO H2H_SERVERS_SESSION_LOG(SESSION_ID,LOG_TYPE,LOG_TEXT)
             VALUES(in_SESSION_ID,in_LOG_TYPE,m_LOG_TEXT);
   END add_H2H_SERVERS_SESSION_LOG;

   PROCEDURE
      end_H2H_SERVERS_SESSION(in_SESSION_ID IN pass.H2H_SERVERS_SESSION.SESSION_ID%TYPE,
                              in_STATUS IN pass.H2H_SERVERS_SESSION.STATUS%TYPE)
   AS
   BEGIN
      UPDATE /*+ INDEX(H2H_SERVERS_SESSION H2H_SERVERS_SESSION_PK) */ H2H_SERVERS_SESSION
             SET STATUS=in_STATUS,END_TIME=SYSDATE WHERE SESSION_ID=in_SESSION_ID;
   END end_H2H_SERVERS_SESSION;

   FUNCTION
      get_PaymentTransactions_Info(in_PayTranId IN PaymentTransactions.PayTranId%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(PaymentTransactions PaymentTransactions_PK) */ ImportEntryDecNo,
                AABRefNo,MessageCode
                FROM PaymentTransactions WHERE PayTranId=in_PayTranId;
      RETURN m_cursor;
   END get_PaymentTransactions_Info;

   FUNCTION
      get_LATEST_DAILY_KEY RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT TO_CHAR(KEY_DATE,'YYYY-MM-DD') KEY_DATE,KEY_VALUE FROM (
                SELECT /*+ INDEX(H2H_DAILY_KEY H2H_DAILY_KEY_PK) */ KEY_DATE,KEY_VALUE
                FROM H2H_DAILY_KEY ORDER BY KEY_DATE DESC
                ) WHERE ROWNUM<2;
      RETURN m_cursor;
   END get_LATEST_DAILY_KEY;

   FUNCTION
      get_DAILY_KEY(in_DATE IN DATE) RETURN VARCHAR2
   IS
   m_KEY_VALUE H2H_DAILY_KEY.KEY_VALUE%TYPE;
   BEGIN
      SELECT /*+ INDEX(H2H_DAILY_KEY H2H_DAILY_KEY_PK) */ KEY_VALUE INTO m_KEY_VALUE
             FROM H2H_DAILY_KEY WHERE KEY_DATE=TRUNC(in_DATE);
      RETURN m_KEY_VALUE;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      RETURN NULL;
   END get_DAILY_KEY;

   FUNCTION
      get_EMAIL_SETTING RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(EMAIL_SETTING EMAIL_SETTING_PK) */ SENDER_EMAIL,CC_EMAIL,BCC_EMAIL,SMTP_HOST,SMTP_PORT,
                SMTP_TYPE,NEED_AUTH,USERNAME,PASSWORD,MOBILE,SMS_GW1,SMS_GW2,SMS_GW3,SMS_GW4
                FROM EMAIL_SETTING WHERE ROWNUM<2;
      RETURN m_cursor;
   END get_EMAIL_SETTING;

   PROCEDURE
      add_H2H_SERVERS_ALERT(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                            in_ALERT_TYPE IN pass.H2H_SERVERS_ALERT.ALERT_TYPE%TYPE,
                            in_SUBJECT IN pass.H2H_SERVERS_ALERT.SUBJECT%TYPE,
                            in_ALERT IN pass.H2H_SERVERS_ALERT.ALERT%TYPE,
                            out_ALERT_ID OUT pass.H2H_SERVERS_ALERT.ALERT_ID%TYPE)
   IS
   m_EMAIL_ALERT H2H_SERVERS.EMAIL_ALERT%TYPE;
   m_MOBILE_ALERT H2H_SERVERS.MOBILE_ALERT%TYPE;
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ EMAIL_ALERT,MOBILE_ALERT INTO m_EMAIL_ALERT,m_MOBILE_ALERT
             FROM H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND ACTIVE_SERVER='Y';
      IF in_ALERT_TYPE<>'S' AND m_EMAIL_ALERT IS NOT NULL THEN
          INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                VALUES(H2H_SEQ.NEXTVAL,m_EMAIL_ALERT,in_ALERT_TYPE,in_SUBJECT,in_ALERT)
                RETURNING ALERT_ID INTO out_ALERT_ID;
      ELSIF in_ALERT_TYPE='S' AND m_MOBILE_ALERT IS NOT NULL THEN
          INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                VALUES(H2H_SEQ.NEXTVAL,m_MOBILE_ALERT,in_ALERT_TYPE,in_SUBJECT,in_ALERT)
                RETURNING ALERT_ID INTO out_ALERT_ID;
      ELSE
         out_ALERT_ID:=0;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      out_ALERT_ID:=-1;
   END add_H2H_SERVERS_ALERT;

   FUNCTION
      get_H2H_SERVERS_ALERT RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_NDX) */ ALERT_ID,ALERT_TYPE,ALERT_TO,SUBJECT,ALERT
                FROM H2H_SERVERS_ALERT WHERE STATUS='N' ORDER BY ALERT_ID;
      RETURN m_cursor;
   END get_H2H_SERVERS_ALERT;

   PROCEDURE
      add_H2H_SERVERS_ALERT_LOG(in_ALERT_ID IN pass.H2H_SERVERS_ALERT.ALERT_ID%TYPE,
                                in_LOG_TEXT IN pass.H2H_SERVERS_ALERT_LOG.LOG_TEXT%TYPE)
   IS
   m_ATTEMPTS H2H_SERVERS_ALERT.ATTEMPTS%TYPE;
   m_STATUS H2H_SERVERS_ALERT.STATUS%TYPE;
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_PK) */ ATTEMPTS,STATUS INTO m_ATTEMPTS,m_STATUS
             FROM H2H_SERVERS_ALERT WHERE ALERT_ID=in_ALERT_ID;
      IF m_STATUS='N' THEN
         INSERT INTO H2H_SERVERS_ALERT_LOG(ALERT_ID,LOG_TEXT) VALUES(in_ALERT_ID,in_LOG_TEXT);
         IF LENGTH(in_LOG_TEXT)>18 AND SUBSTR(in_LOG_TEXT,1,18)='Successfully sent!' THEN
            UPDATE /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_PK) */ H2H_SERVERS_ALERT
                   SET ATTEMPTS=m_ATTEMPTS+1,STATUS='D' WHERE ALERT_ID=in_ALERT_ID;
         ELSIF m_ATTEMPTS>=2 THEN
            UPDATE /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_PK) */ H2H_SERVERS_ALERT
                   SET ATTEMPTS=m_ATTEMPTS+1,STATUS='F' WHERE ALERT_ID=in_ALERT_ID;
         ELSE
            UPDATE /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_PK) */ H2H_SERVERS_ALERT
                   SET ATTEMPTS=m_ATTEMPTS+1 WHERE ALERT_ID=in_ALERT_ID;
         END IF;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      NULL;
   END add_H2H_SERVERS_ALERT_LOG;

   FUNCTION
      get_XMLMANAGER_FILE(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                          in_TRANID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                          in_BANK_CODE IN pass.XMLMANAGER_FILE.BANK_CODE%TYPE) RETURN types.ref_cursor
   IS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_PK) */ get_BANK_SECRET_KEY(BANK_CODE) SECRET_KEY,
                FILENAME,FILEDATE,GZIPXMLFILE
                FROM XMLMANAGER_FILE WHERE TRANTYPE=in_TRANTYPE AND TRANID=in_TRANID AND BANK_CODE=in_BANK_CODE;
      RETURN m_cursor;
   END get_XMLMANAGER_FILE;

   FUNCTION
      get_BANK_XMLMANAGER_FILE(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE)
                                            RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_NDX) */ TRANID,
                TRANTYPE,TO_CHAR(FILEDATE,'YYYY-MM-DD') FILEDATE,XMLHASHVALUE
                FROM XMLMANAGER_FILE
                WHERE BANK_CODE=in_BANK_CODE AND STATUS='N';
      RETURN m_cursor;
   END get_BANK_XMLMANAGER_FILE;

   FUNCTION
      get_BANK_SECRET_KEY(in_BANK_CODE IN pass.H2H_SERVERS.BANK_CODE%TYPE)
                                       RETURN H2H_SERVERS.SECRET_KEY%TYPE
   IS
   m_SECRET_KEY H2H_SERVERS.SECRET_KEY%TYPE;
   BEGIN
      BEGIN
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SECRET_KEY INTO m_SECRET_KEY
                FROM H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND ACTIVE_SERVER='Y';
      EXCEPTION WHEN NO_DATA_FOUND THEN
         m_SECRET_KEY:=NULL;
      END;
      RETURN m_SECRET_KEY;
   END get_BANK_SECRET_KEY;

   PROCEDURE
      set_XMLMANAGER_FILE_STATUS(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                                 in_TRANID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                                 in_STATUS IN pass.XMLMANAGER_FILE.STATUS%TYPE)
   AS
   BEGIN
      UPDATE /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_PK) */ XMLMANAGER_FILE SET STATUS=in_STATUS
             WHERE TRANTYPE=in_TRANTYPE AND TRANID=in_TRANID;
   END set_XMLMANAGER_FILE_STATUS;

   FUNCTION
      get_H2H_SERVERS_BANK_REPORT(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE)
                                          RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_NDX) */ RPTID,TO_CHAR(RPT_DATE,'YYYY-MM-DD') RPT_DATE,FILEHASHVALUE
                FROM H2H_SERVERS_REPORT WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' ORDER BY RPT_DATE;
      RETURN m_cursor;
   END get_H2H_SERVERS_BANK_REPORT;

   FUNCTION
      get_H2H_SERVERS_REPORT(in_RPTID IN pass.H2H_SERVERS_REPORT.RPTID%TYPE,
                             in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_PK) */ get_BANK_SECRET_KEY(BANK_CODE) SECRET_KEY,
                RPT_DATE,FILENAME,GZIPBLOBFILE
                FROM H2H_SERVERS_REPORT WHERE RPTID=in_RPTID AND BANK_CODE=in_BANK_CODE;
      RETURN m_cursor;
   END get_H2H_SERVERS_REPORT;

   PROCEDURE
      add_H2H_SERVERS_REPORT(in_BANK_CODE IN pass.H2H_SERVERS_REPORT.BANK_CODE%TYPE,
                             in_RPT_DATE IN pass.H2H_SERVERS_REPORT.RPT_DATE%TYPE,
                             in_FILENAME IN pass.H2H_SERVERS_REPORT.FILENAME%TYPE,
                             in_FILEHASHVALUE IN pass.H2H_SERVERS_REPORT.FILEHASHVALUE%TYPE,
                             in_GZIPBLOBFILE IN pass.H2H_SERVERS_REPORT.GZIPBLOBFILE%TYPE,
                             out_RPTID OUT pass.H2H_SERVERS_REPORT.RPTID%TYPE)
   AS
   BEGIN
      SELECT /*+ INDEX (H2H_SERVERS_REPORT H2H_SERVERS_REPORT_UDX) */ RPTID INTO out_RPTID
             FROM H2H_SERVERS_REPORT WHERE BANK_CODE=in_BANK_CODE AND RPT_DATE=in_RPT_DATE AND FILENAME=in_FILENAME;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      INSERT INTO H2H_SERVERS_REPORT(RPTID,BANK_CODE,RPT_DATE,FILENAME,FILEHASHVALUE,GZIPBLOBFILE)
             VALUES(H2H_SEQ.NEXTVAL,in_BANK_CODE,in_RPT_DATE,in_FILENAME,in_FILEHASHVALUE,in_GZIPBLOBFILE)
             RETURNING RPTID INTO out_RPTID;
   END add_H2H_SERVERS_REPORT;

   PROCEDURE
       set_H2H_SERVERS_REPORT_STATUS(in_RPTID IN pass.H2H_SERVERS_REPORT.RPTID%TYPE,
                                     in_STATUS IN pass.H2H_SERVERS_REPORT.STATUS%TYPE)
   AS
   BEGIN
      UPDATE /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_PK) */ H2H_SERVERS_REPORT SET STATUS=in_STATUS WHERE RPTID=in_RPTID;
   END set_H2H_SERVERS_REPORT_STATUS;

   FUNCTION
      get_H2H_SERVERS_STATUS(in_BANK_CODE IN pass.H2H_SERVERS_STATUS.BANK_CODE%TYPE)
                                          RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(A H2H_SERVERS_STATUS_NDX) INDEX(B HistoricalPayTransactions_PK) */ A.PAYTRANID PaymentTranId,
                DECODE(B.MESSAGECODE,'IEDPayment','ADV','FIN') PaymentType,
                B.ImportEntryDecNo,
                B.AABRefNo,
                TO_CHAR(B.PCHCSENTDATE,'YYYY-MM-DD HH24:MI:SS') RFPSentDate,
                A.NEW_STATUS RFPStatusAtPCHC,
                B.ERRORMSG RejectReason,
                A.REJECT_REASON,
				A.BOCConfirmID
                FROM H2H_SERVERS_STATUS A,HistoricalPayTransactions B WHERE B.PayTranID=A.PayTranID
                AND A.BANK_CODE=in_BANK_CODE AND A.STATUS='N' ORDER BY B.PCHCSENTDATE;
      RETURN m_cursor;
   END get_H2H_SERVERS_STATUS;

   PROCEDURE
      set_H2H_SERVERS_STATUS_STATUS(in_PAYTRANID IN pass.H2H_SERVERS_STATUS.PAYTRANID%TYPE,
                                    in_STATUS IN pass.H2H_SERVERS_STATUS.STATUS%TYPE)
   AS
   BEGIN
      UPDATE /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_PK) */ H2H_SERVERS_STATUS
             SET STATUS=in_STATUS WHERE PAYTRANID=in_PAYTRANID;
   END set_H2H_SERVERS_STATUS_STATUS;

   PROCEDURE
      set_H2H_SERVERS_NEW_STATUS(in_PAYTRANID IN pass.H2H_SERVERS_STATUS.PAYTRANID%TYPE,
                                 in_BANK_CODE IN H2H_SERVERS_STATUS.BANK_CODE%TYPE,
                                 in_NEW_STATUS IN pass.H2H_SERVERS_STATUS.NEW_STATUS%TYPE,
                                 in_REJECT_REASON IN pass.H2H_SERVERS_STATUS.REJECT_REASON%TYPE)
   IS
   m_STATUS H2H_SERVERS_STATUS.STATUS%TYPE;
   m_NEW_STATUS H2H_SERVERS_STATUS.NEW_STATUS%TYPE;
   m_TASK_ID pass.H2H_SERVERS_TASK.TASK_ID%TYPE;
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_PK) */ STATUS,NEW_STATUS INTO m_STATUS,m_NEW_STATUS
             FROM H2H_SERVERS_STATUS WHERE PAYTRANID=in_PAYTRANID;
      IF NVL(m_NEW_STATUS,'??')<>in_NEW_STATUS THEN
         IF m_STATUS<>'N' THEN
            UPDATE /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_PK) */ H2H_SERVERS_STATUS SET OLD_STATUS=m_NEW_STATUS,
                   NEW_STATUS=in_NEW_STATUS,REJECT_REASON=in_REJECT_REASON,STATUS='N' WHERE PAYTRANID=in_PAYTRANID;
         ELSE
            UPDATE /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_PK) */ H2H_SERVERS_STATUS SET OLD_STATUS=m_NEW_STATUS,
                   NEW_STATUS=in_NEW_STATUS,REJECT_REASON=in_REJECT_REASON WHERE PAYTRANID=in_PAYTRANID;
         END IF;
      ELSIF m_STATUS<>'N' THEN
         UPDATE /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_PK) */ H2H_SERVERS_STATUS SET STATUS='N'
                WHERE PAYTRANID=in_PAYTRANID;
      END IF;
      ADD_H2H_SERVERS_TASK(in_BANK_CODE,'S',m_TASK_ID);
   EXCEPTION WHEN NO_DATA_FOUND THEN
      INSERT INTO H2H_SERVERS_STATUS(PAYTRANID,BANK_CODE,NEW_STATUS,REJECT_REASON) VALUES(in_PAYTRANID,in_BANK_CODE,in_NEW_STATUS,in_REJECT_REASON);
      ADD_H2H_SERVERS_TASK(in_BANK_CODE,'S',m_TASK_ID);
   END set_H2H_SERVERS_NEW_STATUS;

   FUNCTION
      get_H2H_SERVERS_BANK_TASK RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(A H2H_SERVERS_NDX) */ A.BANK_CODE,A.SERVER_TYPE,A.PUBLIC_IP,A.PORT,A.MAC_ADDRESS,A.SECRET_KEY,A.CONN_ATTEMPTS,A.LAST_CONN_FAILED
            FROM H2H_SERVERS A WHERE A.ACTIVE_SERVER='Y' AND A.SERVER_STATUS='Y' AND EXISTS(
            SELECT /*+ INDEX(B H2H_SERVERS_TASK_NDX1) */ B.TASK_ID FROM H2H_SERVERS_TASK B
            WHERE B.BANK_CODE=A.BANK_CODE AND B.SERVER_TYPE=A.SERVER_TYPE AND B.STATUS='N');
      RETURN m_cursor;
   END get_H2H_SERVERS_BANK_TASK;

   FUNCTION
      get_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                                     in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_NDX1) */ TASK_ID,TASK,ATTEMPTS FROM H2H_SERVERS_TASK
                WHERE BANK_CODE=in_BANK_CODE AND SERVER_TYPE=in_SERVER_TYPE
                AND STATUS='N' AND p5_mh2h.IS_TASK_AVAILABLE(BANK_CODE,TASK)='Y';
      RETURN m_cursor;
   END get_H2H_SERVERS_TASK;

   PROCEDURE
      set_H2H_SERVERS_TASK_STATUS(in_TASK_ID IN pass.H2H_SERVERS_TASK.TASK_ID%TYPE,
                           in_SESSION_ID IN pass.H2H_SERVERS_TASK_LOG.SESSION_ID%TYPE,
                           in_STATUS IN pass.H2H_SERVERS_TASK.STATUS%TYPE,
                           in_ATTEMPTS IN pass.H2H_SERVERS_TASK.ATTEMPTS%TYPE,
                           in_TEXT IN VARCHAR2)
   AS
   v_CNT NUMBER;
   m_LOG_TEXT pass.H2H_SERVERS_TASK_LOG.LOG_TEXT%TYPE;
   BEGIN
      IF in_TEXT IS NULL THEN
         m_LOG_TEXT:=NULL;
      ELSE
         IF LENGTH(in_TEXT)>255 THEN
            m_LOG_TEXT:=SUBSTR(in_TEXT,1,252)||'...';
         ELSE
            m_LOG_TEXT:=in_TEXT;
         END IF;
      END IF;
      SELECT COUNT(SESSION_ID) INTO v_CNT FROM pass.H2H_SERVERS_SESSION WHERE SESSION_ID=in_SESSION_ID;
      IF in_STATUS='D' THEN
         UPDATE /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_PK) */ H2H_SERVERS_TASK
                SET STATUS='D',ATTEMPTS=in_ATTEMPTS WHERE TASK_ID=in_TASK_ID;
         IF v_CNT>0 THEN
            INSERT INTO H2H_SERVERS_TASK_LOG(TASK_ID,SESSION_ID,ATTEMPTS,LOG_TYPE,LOG_TEXT)
                   VALUES(in_TASK_ID,in_SESSION_ID,in_ATTEMPTS,in_STATUS,NVL(m_LOG_TEXT,'Done'));
         END IF;
      ELSE
         IF in_ATTEMPTS>=3 THEN
            UPDATE /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_PK) */ H2H_SERVERS_TASK
                   SET STATUS='F',ATTEMPTS=in_ATTEMPTS WHERE TASK_ID=in_TASK_ID;
            IF v_CNT>0 THEN
               INSERT INTO H2H_SERVERS_TASK_LOG(TASK_ID,SESSION_ID,ATTEMPTS,LOG_TYPE,LOG_TEXT)
                      VALUES(in_TASK_ID,in_SESSION_ID,in_ATTEMPTS,'F',NVL(m_LOG_TEXT,'Failed'));
            END IF;
         ELSE
            UPDATE /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_PK) */ H2H_SERVERS_TASK
                   SET ATTEMPTS=in_ATTEMPTS WHERE TASK_ID=in_TASK_ID;
            IF v_CNT>0 THEN
               INSERT INTO H2H_SERVERS_TASK_LOG(TASK_ID,SESSION_ID,ATTEMPTS,LOG_TYPE,LOG_TEXT)
                      VALUES(in_TASK_ID,in_SESSION_ID,in_ATTEMPTS,in_STATUS,NVL(m_LOG_TEXT,'Error'));
            END IF;
         END IF;
      END IF;
   END set_H2H_SERVERS_TASK_STATUS;

   PROCEDURE
       Update_H2H_SERVERS_ATTEMPTS(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                                   in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE,
                                   in_CONN_ATTEMPTS IN pass.H2H_SERVERS.CONN_ATTEMPTS%TYPE)
   IS
   m_PUBLIC_IP pass.H2H_SERVERS.PUBLIC_IP%TYPE;
   m_PORT pass.H2H_SERVERS.PORT%TYPE;
   m_MAC_ADDRESS pass.H2H_SERVERS.MAC_ADDRESS%TYPE;
   m_SECRET_KEY pass.H2H_SERVERS.SECRET_KEY%TYPE;
   m_ACTIVE_SERVER pass.H2H_SERVERS.ACTIVE_SERVER%TYPE;
   m_SERVER_STATUS pass.H2H_SERVERS.SERVER_STATUS%TYPE;
   m_EMAIL_ALERT pass.H2H_SERVERS.EMAIL_ALERT%TYPE;
   m_CONN_ATTEMPTS pass.H2H_SERVERS.CONN_ATTEMPTS%TYPE;
   m_LAST_CONN_FAILED pass.H2H_SERVERS.LAST_CONN_FAILED%TYPE;
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   BEGIN
      IF in_CONN_ATTEMPTS=0 THEN
         UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ H2H_SERVERS SET CONN_ATTEMPTS=in_CONN_ATTEMPTS,LAST_CONN_FAILED=NULL
                WHERE BANK_CODE=in_BANK_CODE AND SERVER_TYPE=in_SERVER_TYPE;
      ELSIF in_CONN_ATTEMPTS<3 THEN
         UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ H2H_SERVERS SET CONN_ATTEMPTS=in_CONN_ATTEMPTS,LAST_CONN_FAILED=SYSDATE
                WHERE BANK_CODE=in_BANK_CODE AND SERVER_TYPE=in_SERVER_TYPE;
      ELSE
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ PUBLIC_IP,PORT,MAC_ADDRESS,SECRET_KEY,SERVER_STATUS,ACTIVE_SERVER,EMAIL_ALERT,CONN_ATTEMPTS,LAST_CONN_FAILED
                INTO m_PUBLIC_IP,m_PORT,m_MAC_ADDRESS,m_SECRET_KEY,m_SERVER_STATUS,m_ACTIVE_SERVER,m_EMAIL_ALERT,m_CONN_ATTEMPTS,m_LAST_CONN_FAILED
                FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND SERVER_TYPE=in_SERVER_TYPE;
         IF m_ACTIVE_SERVER='Y' AND m_SERVER_STATUS='Y' THEN
            v_OldFields := m_PUBLIC_IP ||'^'|| TO_CHAR(m_PORT) ||'^'|| m_MAC_ADDRESS ||'^'|| m_SECRET_KEY ||'^'|| m_SERVER_STATUS ||'^'|| m_ACTIVE_SERVER ||'^'|| NVL(m_EMAIL_ALERT,' ') ||'^'|| TO_CHAR(m_CONN_ATTEMPTS) ||'^'|| TO_CHAR(m_LAST_CONN_FAILED);
            v_NewFields := m_PUBLIC_IP ||'^'|| TO_CHAR(m_PORT) ||'^'|| m_MAC_ADDRESS ||'^'|| m_SECRET_KEY ||'^N^'|| m_ACTIVE_SERVER ||'^'|| NVL(m_EMAIL_ALERT,' ') ||'^'|| TO_CHAR(in_CONN_ATTEMPTS) ||'^'|| TO_CHAR(SYSDATE);
            UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ pass.H2H_SERVERS SET SERVER_STATUS='N',CONN_ATTEMPTS=in_CONN_ATTEMPTS,LAST_CONN_FAILED=SYSDATE
                   WHERE BANK_CODE=in_BANK_CODE AND SERVER_TYPE=in_SERVER_TYPE;
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES('SYSTEM','PCHC','ADMINISTRATION','EDIT','BANK '||in_BANK_CODE||' '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' SERVER SET TO INACTIVE BY SYSTEM DUE TO EXCESSIVE FAILED ATTEMPTS',
                          SYSDATE,'',v_OldFields,v_NewFields);
            IF m_EMAIL_ALERT IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                      VALUES(H2H_SEQ.NEXTVAL,m_EMAIL_ALERT,'T',DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server status set to Inactive',
                      '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      'PAS5 Host-to-Host System set the Bank '||in_BANK_CODE||DECODE(in_SERVER_TYPE,'1',' PRIMARY',' BACKUP')||' Host-to-Host Server status to Inactive due to excessive failed attempts.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
            END IF;
         END IF;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      NULL;
   END Update_H2H_SERVERS_ATTEMPTS;

   PROCEDURE
       ALL_H2H_SERVERS_TASK(in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE)
   IS
   CURSOR CSR IS
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_NDX) */ BANK_CODE,SERVER_TYPE
             FROM H2H_SERVERS WHERE ACTIVE_SERVER='Y';
   m_TASK_ID NUMBER;
   BEGIN
      FOR COL IN CSR LOOP
         CREATE_H2H_SERVERS_TASK(COL.BANK_CODE,COL.SERVER_TYPE,in_TASK,m_TASK_ID);
      END LOOP;
   END ALL_H2H_SERVERS_TASK;

   PROCEDURE
          CREATE_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                                  in_SERVER_TYPE IN pass.H2H_SERVERS_TASK.SERVER_TYPE%TYPE,
                                  in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE,
                                  out_TASK_ID OUT pass.H2H_SERVERS_TASK.TASK_ID%TYPE)
   AS
   m_CNT NUMBER;
   BEGIN
      SELECT /*+ INDEX(A H2H_SERVERS_TASK_NDX1) */ A.TASK_ID INTO out_TASK_ID
             FROM pass.H2H_SERVERS_TASK A WHERE A.BANK_CODE=in_BANK_CODE AND
             A.SERVER_TYPE=in_SERVER_TYPE AND A.STATUS='N' AND A.TASK=in_TASK AND ROWNUM<2;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      IF in_TASK='C' THEN
         m_CNT:=1;
      ELSIF in_TASK='D' THEN
         m_CNT:=1;
      ELSIF in_TASK='R' THEN
         SELECT /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_NDX) */ COUNT(RPTID) INTO m_CNT
                FROM H2H_SERVERS_REPORT WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
      ELSIF in_TASK='S' THEN
         SELECT /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_NDX) */ COUNT(PAYTRANID) INTO m_CNT
                FROM H2H_SERVERS_STATUS WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
      ELSIF in_TASK='X' THEN
         SELECT /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_NDX) */ COUNT(TRANTYPE) INTO m_CNT
                FROM XMLMANAGER_FILE WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
      END IF;
      IF m_CNT>0 THEN
         INSERT INTO H2H_SERVERS_TASK(TASK_ID,BANK_CODE,SERVER_TYPE,TASK)
                VALUES(H2H_SEQ.NEXTVAL,in_BANK_CODE,in_SERVER_TYPE,in_TASK)
                RETURNING TASK_ID INTO out_TASK_ID;
      END IF;
   END CREATE_H2H_SERVERS_TASK;

   PROCEDURE
          ADD_H2H_SERVERS_TASK(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                                  in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE,
                                  out_TASK_ID OUT pass.H2H_SERVERS_TASK.TASK_ID%TYPE)
   IS
   m_CNT NUMBER;
   m_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE;
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE INTO m_SERVER_TYPE
             FROM H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND ACTIVE_SERVER='Y';
      BEGIN
         SELECT /*+ INDEX(A H2H_SERVERS_TASK_NDX1) */ A.TASK_ID INTO out_TASK_ID
                FROM pass.H2H_SERVERS_TASK A WHERE A.BANK_CODE=in_BANK_CODE AND
                A.SERVER_TYPE=m_SERVER_TYPE AND A.STATUS='N' AND A.TASK=in_TASK AND ROWNUM<2;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         IF in_TASK='C' THEN
            m_CNT:=1;
         ELSIF in_TASK='D' THEN
            m_CNT:=1;
         ELSIF in_TASK='R' THEN
            SELECT /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_NDX) */ COUNT(RPTID) INTO m_CNT
                   FROM H2H_SERVERS_REPORT WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         ELSIF in_TASK='S' THEN
            SELECT /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_NDX) */ COUNT(PAYTRANID) INTO m_CNT
                   FROM H2H_SERVERS_STATUS WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         ELSIF in_TASK='X' THEN
            m_CNT:=1;
            -- SELECT /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_NDX) */ COUNT(TRANTYPE) INTO m_CNT
            --        FROM XMLMANAGER_FILE WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         END IF;
         IF m_CNT>0 THEN
            INSERT INTO H2H_SERVERS_TASK(TASK_ID,BANK_CODE,SERVER_TYPE,TASK)
                   VALUES(H2H_SEQ.NEXTVAL,in_BANK_CODE,m_SERVER_TYPE,in_TASK)
                   RETURNING TASK_ID INTO out_TASK_ID;
         END IF;
      END;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      out_TASK_ID:=0;
   END ADD_H2H_SERVERS_TASK;

   FUNCTION
       IS_TASK_AVAILABLE(in_BANK_CODE IN pass.H2H_SERVERS_TASK.BANK_CODE%TYPE,
                         in_TASK IN pass.H2H_SERVERS_TASK.TASK%TYPE) RETURN VARCHAR2
   IS
   m_CNT NUMBER;
   BEGIN
      IF in_TASK='C' THEN
         SELECT /*+ INDEX(H2H_PCHC_HOST H2H_PCHC_HOST_PK) */ COUNT(HOST_NAME) INTO m_CNT
                FROM H2H_PCHC_HOST WHERE (HOST_STATUS='Y' OR NVL(HOST2_STATUS,'N')='Y') AND ROWNUM<2;
         IF NVL(m_CNT,0)>0 THEN
            RETURN 'Y';
         ELSE
            RETURN 'N';
         END IF;
      ELSIF in_TASK='D' THEN
         IF get_DAILY_KEY(SYSDATE) IS NULL THEN
            RETURN 'N';
         ELSE
            RETURN 'Y';
         END IF;
      ELSIF in_TASK='R' THEN
         SELECT /*+ INDEX(H2H_SERVERS_REPORT H2H_SERVERS_REPORT_NDX) */ COUNT(RPTID) INTO m_CNT
                FROM H2H_SERVERS_REPORT WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         IF NVL(m_CNT,0)>0 THEN
            RETURN 'Y';
         ELSE
            RETURN 'N';
         END IF;
      ELSIF in_TASK='S' THEN
         SELECT /*+ INDEX(H2H_SERVERS_STATUS H2H_SERVERS_STATUS_NDX) */ COUNT(PAYTRANID) INTO m_CNT
                FROM H2H_SERVERS_STATUS WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         IF NVL(m_CNT,0)>0 THEN
            RETURN 'Y';
         ELSE
            RETURN 'N';
         END IF;
      ELSIF in_TASK='X' THEN
         SELECT /*+ INDEX(XMLMANAGER_FILE XMLMANAGER_FILE_NDX) */ COUNT(TRANTYPE) INTO m_CNT
                FROM XMLMANAGER_FILE WHERE BANK_CODE=in_BANK_CODE AND STATUS='N' AND ROWNUM<2;
         IF NVL(m_CNT,0)>0 THEN
            RETURN 'Y';
         ELSE
            RETURN 'N';
         END IF;
      ELSE
         RETURN 'N';
      END IF;
   END IS_TASK_AVAILABLE;

   PROCEDURE
      verify_Payment_Validation(in_TRAN_TYPE IN H2H_SERVERS_VALIDATE.TRAN_TYPE%TYPE,
                                in_TRAN_ID IN H2H_SERVERS_VALIDATE.TRAN_ID%TYPE,
                                in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                in_CUSTOMSCLIENTNO IN PaymentTransactions.CUSTOMSCLIENTNO%TYPE,
                                in_Status IN VARCHAR2,
                                in_INVALID_REASON IN H2H_SERVERS_VALIDATE.INVALID_REASON%TYPE,
                                out_Result OUT VARCHAR2)
   IS
   m_CNT NUMBER;
   m_DATE_CREATED H2H_SERVERS_VALIDATE.DATE_CREATED%TYPE;
   BEGIN
      SELECT /*+ INDEX(PaymentTransactions PaymentTransactions_PK) */ COUNT(PayTranId) INTO m_CNT
             FROM PaymentTransactions WHERE PayTranId=in_TRAN_ID
             AND AABRefNo=in_AABRefNo AND TRIM(ImportEntryDecNo)=TRIM(in_ImportEntryDecNo) AND CUSTOMSCLIENTNO=in_CUSTOMSCLIENTNO;
      IF NVL(m_CNT,0)>0 THEN
         BEGIN
            SELECT /*+ INDEX(H2H_SERVERS_VALIDATE H2H_SERVERS_VALIDATE_PK) */ DATE_CREATED
                   INTO m_DATE_CREATED FROM H2H_SERVERS_VALIDATE WHERE TRAN_TYPE=in_TRAN_TYPE AND TRAN_ID=in_TRAN_ID;
         EXCEPTION WHEN NO_DATA_FOUND THEN
            m_DATE_CREATED:=NULL;
         END;
         IF m_DATE_CREATED IS NULL THEN
            IF in_Status<>'OK' AND in_INVALID_REASON IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_VALIDATE(TRAN_TYPE,TRAN_ID,INVALID_REASON)
                      VALUES(in_TRAN_TYPE,in_TRAN_ID,in_INVALID_REASON);
            ELSE
               INSERT INTO H2H_SERVERS_VALIDATE(TRAN_TYPE,TRAN_ID)
                      VALUES(in_TRAN_TYPE,in_TRAN_ID);
            END IF;
            COMMIT;
            out_Result:='OK';
         ELSE
            out_Result:='Error: PayTranId '||TO_CHAR(in_TRAN_ID)||', IED '||TRIM(in_ImportEntryDecNo)||', AABRefNo '||in_AABRefNo||' and CCN '||in_CUSTOMSCLIENTNO||' already validated';
         END IF;
      ELSE
         out_Result:='Error: PayTranId '||TO_CHAR(in_TRAN_ID)||', IED '||TRIM(in_ImportEntryDecNo)||', AABRefNo '||in_AABRefNo||' and CCN '||in_CUSTOMSCLIENTNO||' not found';
      END IF;
   END verify_Payment_Validation;

   PROCEDURE
      verify_Payment_Confirmation(in_PayTranId IN PaymentTransactions.PayTranId%TYPE,
                                  in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                  in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                  out_Result OUT VARCHAR2)
   IS
   m_BRSTN PaymentTransactions.BRSTN%TYPE;
   m_MessageCode PaymentTransactions.MessageCode%TYPE;
   m_AABMakerID PaymentTransactions.AABMakerID%TYPE;
   m_AABAuthorizerID PaymentTransactions.AABAuthorizerID%TYPE;
   m_DATE_CREATED H2H_SERVERS_VALIDATE.DATE_CREATED%TYPE;
   m_INVALID_REASON H2H_SERVERS_VALIDATE.INVALID_REASON%TYPE;
   BEGIN
      SELECT /*+ INDEX(PaymentTransactions PaymentTransactions_PK) */ AABMakerID,AABAuthorizerID,BRSTN,MessageCode
             INTO m_AABMakerID,m_AABAuthorizerID,m_BRSTN,m_MessageCode
             FROM PaymentTransactions WHERE PayTranId=in_PayTranId
             AND AABRefNo=in_AABRefNo AND TRIM(ImportEntryDecNo)=TRIM(in_ImportEntryDecNo);
      IF m_AABAuthorizerID IS NOT NULL THEN
         out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' already authorized';
      ELSE
         BEGIN
            IF m_MessageCode='IEDPayment' THEN
               SELECT /*+ INDEX(H2H_SERVERS_VALIDATE H2H_SERVERS_VALIDATE_PK) */ DATE_CREATED,INVALID_REASON
                      INTO m_DATE_CREATED,m_INVALID_REASON FROM H2H_SERVERS_VALIDATE WHERE TRAN_TYPE='A' AND TRAN_ID=in_PayTranId;
            ELSE
               SELECT /*+ INDEX(H2H_SERVERS_VALIDATE H2H_SERVERS_VALIDATE_PK) */ DATE_CREATED,INVALID_REASON
                      INTO m_DATE_CREATED,m_INVALID_REASON FROM H2H_SERVERS_VALIDATE WHERE TRAN_TYPE='F' AND TRAN_ID=in_PayTranId;
            END IF;
         EXCEPTION WHEN NO_DATA_FOUND THEN
            m_DATE_CREATED:=NULL;
            m_INVALID_REASON:=NULL;
         END;
         IF m_DATE_CREATED IS NULL THEN
            out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' not validated by the Bank';
         ELSIF m_INVALID_REASON IS NOT NULL THEN
            out_Result:='Error: Bank validation failed - '||m_INVALID_REASON;
         ELSE
            BEGIN
               SELECT /*+ INDEX(AABUsers UserID) */ UserID INTO m_AABMakerID FROM AABUsers WHERE UserID LIKE 'PXG___'||SUBSTR(m_BRSTN,3,3)||'%';
            EXCEPTION WHEN NO_DATA_FOUND THEN
               m_AABMakerID:=NULL;
            END;
            BEGIN
               SELECT /*+ INDEX(AABUsers UserID) */ UserID INTO m_AABAuthorizerID FROM AABUsers WHERE UserID LIKE 'PXH___'||SUBSTR(m_BRSTN,3,3)||'%';
            EXCEPTION WHEN NO_DATA_FOUND THEN
               m_AABAuthorizerID:=NULL;
            END;
            IF m_AABMakerID IS NULL AND m_AABAuthorizerID IS NULL THEN
               out_Result:='Error: No Host-to-Host Maker and Authorizer defined to confirm the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
            ELSIF m_AABAuthorizerID IS NULL THEN
               out_Result:='Error: No Host-to-Host Authorizer defined to authorize the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
            ELSIF m_AABMakerID IS NULL THEN
               out_Result:='Error: No Host-to-Host Maker defined to make the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
            ELSE
               out_Result:='Ok';
            END IF;
         END IF;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' not found';
   END verify_Payment_Confirmation;

   PROCEDURE
      process_Payment_Confirmation(in_PayTranId IN PaymentTransactions.PayTranId%TYPE,
                                   in_ImportEntryDecNo IN PaymentTransactions.ImportEntryDecNo%TYPE,
                                   in_AABRefNo IN PaymentTransactions.AABRefNo%TYPE,
                                   in_AABCollectionDate IN PaymentTransactions.AABCollectionDate%TYPE,
                                   in_LetterOfCreditNo IN PaymentTransactions.LetterOfCreditNo%TYPE,
                                   in_SESSION_ID IN H2H_SERVERS_SESSION.SESSION_ID%TYPE,
                                   in_BANK_CODE IN H2H_SERVERS_PAY_CONFIRMED.BANK_CODE%TYPE,
                                   out_Result OUT VARCHAR2,
                                   out_Approve OUT types.ref_cursor)
   IS
   m_Cnt NUMBER;
   m_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE;
   m_BRSTN PaymentTransactions.BRSTN%TYPE;
   m_MessageCode PaymentTransactions.MessageCode%TYPE;
   m_AABMakerID PaymentTransactions.AABMakerID%TYPE;
   m_AABMAKERTIMESTAMP PaymentTransactions.AABMAKERTIMESTAMP%TYPE;
   m_AABAuthorizerID PaymentTransactions.AABAuthorizerID%TYPE;
   m_DATE_CREATED H2H_SERVERS_VALIDATE.DATE_CREATED%TYPE;
   m_INVALID_REASON H2H_SERVERS_VALIDATE.INVALID_REASON%TYPE;
   BEGIN
      BEGIN
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE INTO m_SERVER_TYPE
                FROM H2H_SERVERS WHERE BANK_CODE=in_BANK_CODE AND ACTIVE_SERVER='Y';
      EXCEPTION WHEN NO_DATA_FOUND THEN
         m_SERVER_TYPE:=NULL;
      END;
      IF m_SERVER_TYPE IS NOT NULL THEN
         SELECT /*+ INDEX(PaymentTransactions PaymentTransactions_PK) */ AABMakerID,AABAuthorizerID,BRSTN,MessageCode,AABMAKERTIMESTAMP
                INTO m_AABMakerID,m_AABAuthorizerID,m_BRSTN,m_MessageCode,m_AABMAKERTIMESTAMP
                FROM PaymentTransactions WHERE PayTranId=in_PayTranId
                AND AABRefNo=in_AABRefNo AND TRIM(ImportEntryDecNo)=TRIM(in_ImportEntryDecNo);
         IF m_AABAuthorizerID IS NOT NULL THEN
            out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' already authorized';
         ELSE
            BEGIN
               IF m_MessageCode='IEDPayment' THEN
                  SELECT /*+ INDEX(H2H_SERVERS_VALIDATE H2H_SERVERS_VALIDATE_PK) */ DATE_CREATED,INVALID_REASON
                         INTO m_DATE_CREATED,m_INVALID_REASON FROM H2H_SERVERS_VALIDATE WHERE TRAN_TYPE='A' AND TRAN_ID=in_PayTranId;
               ELSE
                  SELECT /*+ INDEX(H2H_SERVERS_VALIDATE H2H_SERVERS_VALIDATE_PK) */ DATE_CREATED,INVALID_REASON
                         INTO m_DATE_CREATED,m_INVALID_REASON FROM H2H_SERVERS_VALIDATE WHERE TRAN_TYPE='F' AND TRAN_ID=in_PayTranId;
               END IF;
            EXCEPTION WHEN NO_DATA_FOUND THEN
               m_DATE_CREATED:=NULL;
               m_INVALID_REASON:=NULL;
            END;
            IF m_DATE_CREATED IS NULL THEN
               out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' not validated by the Bank';
            ELSIF m_INVALID_REASON IS NOT NULL THEN
               out_Result:='Error: Bank validation failed - '||m_INVALID_REASON;
            ELSE
               IF m_AABMakerID IS NULL THEN
                  BEGIN
                     SELECT /*+ INDEX(AABUsers UserID) */ UserID INTO m_AABMakerID FROM AABUsers WHERE UserID LIKE 'PXG___'||SUBSTR(m_BRSTN,3,3)||'%';
                  EXCEPTION WHEN NO_DATA_FOUND THEN
                     m_AABMakerID:=NULL;
                  END;
               END IF;
               BEGIN
                  SELECT /*+ INDEX(AABUsers UserID) */ UserID INTO m_AABAuthorizerID FROM AABUsers WHERE UserID LIKE 'PXH___'||SUBSTR(m_BRSTN,3,3)||'%';
               EXCEPTION WHEN NO_DATA_FOUND THEN
                  m_AABAuthorizerID:=NULL;
               END;
               IF m_AABMakerID IS NULL AND m_AABAuthorizerID IS NULL THEN
                  out_Result:='Error: No Host-to-Host Maker and Authorizer defined to confirm the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
               ELSIF m_AABAuthorizerID IS NULL THEN
                  out_Result:='Error: No Host-to-Host Authorizer defined to authorize the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
               ELSIF m_AABMakerID IS NULL THEN
                  out_Result:='Error: No Host-to-Host Maker defined to make the PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
               ELSE
                  m_Cnt:=pass.p5_m8pm.set_forapproval(in_PayTranId,m_BRSTN,m_AABMakerID,in_LetterOfCreditNo);
                  IF m_Cnt>0 THEN
                     IF m_AABMAKERTIMESTAMP IS NULL THEN
                        UPDATE /*+ INDEX(PaymentTransactions PaymentTransactions_PK) */ PaymentTransactions
                               SET AABMAKERTIMESTAMP=m_DATE_CREATED WHERE PayTranId=in_PayTranId;
                     END IF;
                     out_Approve:=pass.p5_m8pm.do_approve2(in_PayTranId,m_BRSTN,m_AABAuthorizerID);
                     -- UPDATE /*+ index(PaymentTransactions PaymentTransactions_PK) */ PaymentTransactions SET AABAuthorizerID = m_AABAuthorizerID,
                     --       AuthorizerAction = 'APPROVE',AABAuthorizerTimeStamp = SYSDATE,AABCollectionDate = in_AABCollectionDate
                     --       WHERE PayTranID = in_PayTranId;
                     IF out_Approve IS NULL THEN
                        ROLLBACK;
                        out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' cannot be Authorized';
                     ELSE
                        INSERT INTO H2H_SERVERS_PAY_CONFIRMED(PAYTRANID,SESSION_ID,BANK_CODE,SERVER_TYPE)
                               VALUES(in_PayTranId,in_SESSION_ID,in_BANK_CODE,m_SERVER_TYPE);
                        COMMIT;
                        out_Result:='Ok';
                     END IF;
                  ELSE
                     ROLLBACK;
                     out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' cannot be Made';
                  END IF;
               END IF;
            END IF;
         END IF;
      ELSE
         out_Result:='Error: Bank '||in_BANK_CODE||' Host Registration not found, cannot process PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      out_Result:='Error: PayTranId '||TO_CHAR(in_PayTranId)||', IED '||TRIM(in_ImportEntryDecNo)||' and AABRefNo '||in_AABRefNo||' not found';
   END process_Payment_Confirmation;

END p5_mh2h;
/
/* June 29, 2013 */
CREATE OR REPLACE PACKAGE p5_m1sm
AS
   -- (added) start
   FUNCTION
      get_Active_Server(in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE) RETURN VARCHAR2;

   PROCEDURE
      set_Active_Server(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                        in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                        in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE);

   FUNCTION
      get_H2H_Server(in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                     in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE) RETURN types.ref_cursor;

   PROCEDURE
      update_H2H_Server(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                        in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                        in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE,
                        in_PUBLIC_IP IN pass.H2H_SERVERS.PUBLIC_IP%TYPE,
                        in_PORT IN pass.H2H_SERVERS.PORT%TYPE,
                        in_MAC_ADDRESS IN pass.H2H_SERVERS.MAC_ADDRESS%TYPE,
                        in_SECRET_KEY IN pass.H2H_SERVERS.SECRET_KEY%TYPE,
                        in_SERVER_STATUS IN pass.H2H_SERVERS.SERVER_STATUS%TYPE,
                        in_EMAIL_ALERT IN pass.H2H_SERVERS.EMAIL_ALERT%TYPE,
                        in_MOBILE_ALERT IN pass.H2H_SERVERS.MOBILE_ALERT%TYPE,
                        out_Result OUT NUMBER);

   FUNCTION
      do_checkAABUSERID(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN NUMBER;
   -- (added) end

   FUNCTION
      get_csvlist(in_BankCode IN pass.Branches.BankCode%TYPE) RETURN types.ref_cursor;
   FUNCTION
      do_checkBRSTN(in_BRSTN IN pass.Branches.BRSTN%TYPE) RETURN NUMBER;
   FUNCTION
      do_checkNick(in_UserID IN pass.TempAABUsers.UserID%TYPE) RETURN NUMBER;
   PROCEDURE
      do_update(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                in_MiddleName IN pass.TempAABUsers.MiddleName%TYPE,
                in_LastName IN pass.TempAABUsers.LastName%TYPE,
                in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,
                in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE);

   FUNCTION
      do_undo(in_UserTranID pass.TempAABUsers.UserTranID%TYPE) RETURN NUMBER;

   PROCEDURE
      do_updatePass(in_UserTranID pass.TempAABUsers.UserTranID%TYPE,
                    in_DefaultPassword pass.TempAABUsers.DefaultPassword%TYPE,
                    in_AdminID IN pass.TempAABUsers.AdminID%TYPE);
   FUNCTION
      do_GetForDownload(in_BankCode IN pass.Branches.BankCode%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_viewInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                   in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_confirmInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                      in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_infoForEdit(in_BankCode IN pass.Branches.BankCode%TYPE,
                      in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor;

   FUNCTION
      get_details(in_BankCode IN pass.Branches.BankCode%TYPE,
                  o_numrows OUT NUMBER,
                  io_page IN OUT NUMBER) RETURN types.ref_cursor;

   PROCEDURE get_summary(in_BankCode IN pass.Branches.BankCode%TYPE,
                         o_tdone OUT NUMBER,
                         o_tpending OUT NUMBER,
                         o_treject OUT NUMBER,
                         o_edone OUT NUMBER,
                         o_epending OUT NUMBER,
                         o_ereject OUT NUMBER,
                         o_ddone OUT NUMBER,
                         o_dpending OUT NUMBER,
                         o_dreject OUT NUMBER,
                         o_ldone OUT NUMBER,
                         o_lpending OUT NUMBER,
                         o_lreject OUT NUMBER,
                         o_udone OUT NUMBER,
                         o_upending OUT NUMBER,
                         o_ureject OUT NUMBER,
                         o_changed OUT NUMBER,
                         o_total_users OUT NUMBER,
                         o_total_locked OUT NUMBER);

  FUNCTION
     dget_details(in_BankCode IN pass.Branches.BankCode%TYPE,
                  o_numrows OUT NUMBER) RETURN types.ref_cursor;

END p5_m1sm;
/
CREATE OR REPLACE PACKAGE BODY p5_m1sm
AS
   -- (added) start

   FUNCTION
      get_Active_Server(in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE) RETURN VARCHAR2
   IS
   m_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE;
   m_PUBLIC_IP H2H_SERVERS.PUBLIC_IP%TYPE;
   m_PORT H2H_SERVERS.PORT%TYPE;
   m_SERVER_STATUS H2H_SERVERS.SERVER_STATUS%TYPE;
   m_CNT NUMBER;
   BEGIN
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ COUNT(BANK_CODE) INTO m_CNT FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode;
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE,PUBLIC_IP,PORT,SERVER_STATUS INTO m_SERVER_TYPE,m_PUBLIC_IP,m_PORT,m_SERVER_STATUS
             FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND ACTIVE_SERVER='Y';
      IF m_SERVER_TYPE='1' THEN
         IF m_SERVER_STATUS='Y' THEN
            IF m_CNT>1 THEN
               RETURN m_SERVER_TYPE||'Primary Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||')';
            ELSE
               RETURN '0Primary Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||')';
            END IF;
         ELSE
            IF m_CNT>1 THEN
               RETURN m_SERVER_TYPE||'<span style="color:#ff0000;">Primary Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||') [Inactive]</span>';
            ELSE
               RETURN '0<span style="color:#ff0000;">Primary Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||') [Inactive]</span>';
            END IF;
         END IF;
      ELSE
         IF m_SERVER_STATUS='Y' THEN
            IF m_CNT>1 THEN
               RETURN m_SERVER_TYPE||'Backup Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||')';
            ELSE
               RETURN '0Backup Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||')';
            END IF;
         ELSE
            IF m_CNT>1 THEN
               RETURN m_SERVER_TYPE||'<span style="color:#ff0000;">Backup Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||') [Inactive]</span>';
            ELSE
               RETURN '0<span style="color:#ff0000;">Backup Server ('||m_PUBLIC_IP||':'||TO_CHAR(m_PORT)||') [Inactive]</span>';
            END IF;
         END IF;
      END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      IF NVL(m_CNT,0)=0 THEN
         RETURN '0'||'No Server registered';
      ELSIF NVL(m_CNT,0)>1 THEN
         RETURN 'N'||'No Active Server set';
      ELSE
         BEGIN
            SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE INTO m_SERVER_TYPE
                   FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND ROWNUM<2;
            IF m_SERVER_TYPE='1' THEN
               RETURN '2'||'No Active Server set';
            ELSE
               RETURN '1'||'No Active Server set';
            END IF;
         EXCEPTION WHEN NO_DATA_FOUND THEN
            RETURN '0'||'No Server registered';
         END;
      END IF;
   END get_Active_Server;

   PROCEDURE
      set_Active_Server(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                        in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                        in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE)
   IS
   m_UserID pass.AABUsers.UserID%TYPE;
   m_UserTypeGrp pass.AABUserType.UserTypeGrp%TYPE;
   m_SERVER_TYPE H2H_SERVERS.SERVER_TYPE%TYPE;
   m_ACTIVE_SERVER H2H_SERVERS.ACTIVE_SERVER%TYPE;
   m_UserFullName VARCHAR2(110);
   m_EMAIL_ALERT H2H_SERVERS.EMAIL_ALERT%TYPE;
   m_MOBILE_ALERT H2H_SERVERS.MOBILE_ALERT%TYPE;
   BEGIN
      BEGIN
         SELECT /*+ INDEX(A AABUSERS_PK) INDEX(B AABUSERTYPE_PK) */ A.USERID,B.USERTYPEGRP,
                NVL(A.FIRSTNAME||' ','')||NVL(A.MIDDLENAME||' ','')||A.LASTNAME INTO m_UserID,m_UserTypeGrp,m_UserFullName
                FROM AABUSERS A,AABUSERTYPE B WHERE B.USERTYPEDESC=A.USERTYPEDESC AND A.USERTRANID=in_UserTranID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         m_UserID:='Unknown';
         m_UserFullName:='Unknown H2H Admin';
         m_UserTypeGrp:='BAP';
      END;
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_PK) */ SERVER_TYPE,EMAIL_ALERT,MOBILE_ALERT INTO m_SERVER_TYPE,m_EMAIL_ALERT,m_MOBILE_ALERT
             FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND ACTIVE_SERVER='Y';
       IF m_SERVER_TYPE<>in_SERVER_TYPE THEN
          UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ pass.H2H_SERVERS SET ACTIVE_SERVER=m_SERVER_TYPE
                 WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=m_SERVER_TYPE;
          UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ pass.H2H_SERVERS SET ACTIVE_SERVER='Y'
                 WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
          INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                 VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','EDIT',
                        'BANK '||in_BankCode||' ACTIVE HOST-TO-HOST SERVER IS CHANGED TO '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP'),
                        SYSDATE,'','ACTIVE_SERVER='||in_SERVER_TYPE,'ACTIVE_SERVER=Y');
          IF m_EMAIL_ALERT IS NOT NULL THEN
             INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                    VALUES(H2H_SEQ.NEXTVAL,m_EMAIL_ALERT,'T','Active Host-to-Host Server changed to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP'),
                    '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                    m_UserFullName||' ('||m_UserID||') has changed the Active Host-to-Host Server to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||'.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                    'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
          END IF;
          IF m_MOBILE_ALERT IS NOT NULL THEN
             INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                    VALUES(H2H_SEQ.NEXTVAL,m_MOBILE_ALERT,'S',
                    m_UserFullName||' ('||m_UserID||') has changed the Active Host-to-Host Server to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||'. (PAS5 H2H)');
          END IF;
          UPDATE /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_NDX1) */ H2H_SERVERS_TASK SET SERVER_TYPE=in_SERVER_TYPE
                 WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=m_SERVER_TYPE AND STATUS='N';
       END IF;
   EXCEPTION WHEN NO_DATA_FOUND THEN
      BEGIN
         SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ ACTIVE_SERVER,EMAIL_ALERT INTO m_ACTIVE_SERVER,m_EMAIL_ALERT
                FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
         IF m_ACTIVE_SERVER<>'Y' THEN
            UPDATE /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ pass.H2H_SERVERS SET ACTIVE_SERVER='Y'
                   WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','EDIT',
                          'BANK '||in_BankCode||' ACTIVE HOST-TO-HOST SERVER IS SET TO '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP'),
                          SYSDATE,'','ACTIVE_SERVER='||m_ACTIVE_SERVER,'ACTIVE_SERVER=Y');
            IF m_EMAIL_ALERT IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                      VALUES(H2H_SEQ.NEXTVAL,m_EMAIL_ALERT,'T','Active Host-to-Host Server set to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP'),
                      '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      m_UserFullName||' ('||m_UserID||') has set the Active Host-to-Host Server to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||'.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
            END IF;
            IF m_MOBILE_ALERT IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                      VALUES(H2H_SEQ.NEXTVAL,m_MOBILE_ALERT,'S',
                      m_UserFullName||' ('||m_UserID||') has set the Active Host-to-Host Server to '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||'. (PAS5 H2H)');
            END IF;
         END IF;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         NULL;
      END;
   END set_Active_Server;

   FUNCTION
      get_H2H_Server(in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                     in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT/*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */  PUBLIC_IP,PORT,MAC_ADDRESS,SECRET_KEY,SERVER_STATUS,EMAIL_ALERT,MOBILE_ALERT
                FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
      RETURN m_cursor;
   END get_H2H_Server;

   PROCEDURE
      update_H2H_Server(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                        in_BankCode IN pass.H2H_SERVERS.BANK_CODE%TYPE,
                        in_SERVER_TYPE IN pass.H2H_SERVERS.SERVER_TYPE%TYPE,
                        in_PUBLIC_IP IN pass.H2H_SERVERS.PUBLIC_IP%TYPE,
                        in_PORT IN pass.H2H_SERVERS.PORT%TYPE,
                        in_MAC_ADDRESS IN pass.H2H_SERVERS.MAC_ADDRESS%TYPE,
                        in_SECRET_KEY IN pass.H2H_SERVERS.SECRET_KEY%TYPE,
                        in_SERVER_STATUS IN pass.H2H_SERVERS.SERVER_STATUS%TYPE,
                        in_EMAIL_ALERT IN pass.H2H_SERVERS.EMAIL_ALERT%TYPE,
                        in_MOBILE_ALERT IN pass.H2H_SERVERS.MOBILE_ALERT%TYPE,
                        out_Result OUT NUMBER)
   IS
   m_CHANGE BOOLEAN;
   m_NETCHANGE BOOLEAN;
   m_SECRETCHANGE BOOLEAN;
   m_PUBLIC_IP pass.H2H_SERVERS.PUBLIC_IP%TYPE;
   m_PORT pass.H2H_SERVERS.PORT%TYPE;
   m_MAC_ADDRESS pass.H2H_SERVERS.MAC_ADDRESS%TYPE;
   m_SECRET_KEY pass.H2H_SERVERS.SECRET_KEY%TYPE;
   m_ACTIVE_SERVER pass.H2H_SERVERS.ACTIVE_SERVER%TYPE;
   m_SERVER_STATUS pass.H2H_SERVERS.SERVER_STATUS%TYPE;
   m_EMAIL_ALERT pass.H2H_SERVERS.EMAIL_ALERT%TYPE;
   m_MOBILE_ALERT pass.H2H_SERVERS.MOBILE_ALERT%TYPE;
   m_UserID pass.AABUsers.UserID%TYPE;
   m_UserTranID pass.AABUsers.UserTranID%TYPE;
   m_UserTypeGrp pass.AABUserType.UserTypeGrp%TYPE;
   m_BRSTN pass.Branches.BRSTN%TYPE;
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   m_UserFullName VARCHAR2(110);
   m_Action VARCHAR2(30);
   BEGIN
      IF in_UserTranID>0 THEN
         SELECT /*+ INDEX(A AABUSERS_PK) INDEX(B AABUSERTYPE_PK) */ A.USERID,B.USERTYPEGRP,
                NVL(A.FIRSTNAME||' ','')||NVL(A.MIDDLENAME||' ','')||A.LASTNAME INTO m_UserID,m_UserTypeGrp,m_UserFullName
                FROM AABUSERS A,AABUSERTYPE B WHERE B.USERTYPEDESC=A.USERTYPEDESC AND A.USERTRANID=in_UserTranID;
      ELSE
         m_UserID:='SYSTEM';
         m_UserFullName:='PAS5 Host-to-Host System';
         m_UserTypeGrp:='PCHC';
      END IF;
      out_Result:=0;
      SELECT /*+ INDEX(H2H_SERVERS H2H_SERVERS_UDX) */ PUBLIC_IP,PORT,MAC_ADDRESS,SECRET_KEY,SERVER_STATUS,ACTIVE_SERVER,EMAIL_ALERT,MOBILE_ALERT
             INTO m_PUBLIC_IP,m_PORT,m_MAC_ADDRESS,m_SECRET_KEY,m_SERVER_STATUS,m_ACTIVE_SERVER,m_EMAIL_ALERT,m_MOBILE_ALERT
             FROM pass.H2H_SERVERS WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
      m_CHANGE:=FALSE;
      m_NETCHANGE:=FALSE;
      m_SECRETCHANGE:=FALSE;
      IF in_PUBLIC_IP<>m_PUBLIC_IP THEN
         m_CHANGE:=TRUE;
         m_NETCHANGE:=TRUE;
      ELSIF in_PORT<>m_PORT THEN
         m_CHANGE:=TRUE;
         m_NETCHANGE:=TRUE;
      ELSIF in_MAC_ADDRESS<>m_MAC_ADDRESS THEN
         m_CHANGE:=TRUE;
         m_NETCHANGE:=TRUE;
      ELSIF in_SECRET_KEY<>m_SECRET_KEY THEN
         m_CHANGE:=TRUE;
         m_SECRETCHANGE:=TRUE;
      ELSIF in_SERVER_STATUS<>m_SERVER_STATUS THEN
         m_CHANGE:=TRUE;
         IF in_SERVER_STATUS='Y' THEN
            m_NETCHANGE:=TRUE;
         END IF;
      ELSIF NVL(in_EMAIL_ALERT,'`~`')<>NVL(m_EMAIL_ALERT,'`~`') THEN
         m_CHANGE:=TRUE;
      ELSIF NVL(in_MOBILE_ALERT,'`~`')<>NVL(m_MOBILE_ALERT,'`~`') THEN
         m_CHANGE:=TRUE;
      END IF;
      IF m_CHANGE THEN
         v_OldFields := m_PUBLIC_IP ||'^'|| TO_CHAR(m_PORT) ||'^'|| m_MAC_ADDRESS ||'^'|| m_SECRET_KEY ||'^'|| m_SERVER_STATUS ||'^'|| NVL(m_EMAIL_ALERT,' ') ||'^'|| NVL(m_MOBILE_ALERT,' ');
         v_NewFields := in_PUBLIC_IP ||'^'|| TO_CHAR(in_PORT) ||'^'|| in_MAC_ADDRESS ||'^'|| in_SECRET_KEY ||'^'|| in_SERVER_STATUS ||'^'|| NVL(in_EMAIL_ALERT,' ') ||'^'|| NVL(in_MOBILE_ALERT,' ');
         IF in_SERVER_STATUS<>m_SERVER_STATUS AND in_SERVER_STATUS='Y' THEN
            UPDATE pass.H2H_SERVERS SET PUBLIC_IP=in_PUBLIC_IP,PORT=in_PORT,MAC_ADDRESS=in_MAC_ADDRESS,SECRET_KEY=in_SECRET_KEY,
                   SERVER_STATUS=in_SERVER_STATUS,EMAIL_ALERT=in_EMAIL_ALERT,MOBILE_ALERT=in_MOBILE_ALERT,CONN_ATTEMPTS=0,LAST_CONN_FAILED=NULL
                   WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
         ELSE
            UPDATE pass.H2H_SERVERS SET PUBLIC_IP=in_PUBLIC_IP,PORT=in_PORT,MAC_ADDRESS=in_MAC_ADDRESS,SECRET_KEY=in_SECRET_KEY,SERVER_STATUS=in_SERVER_STATUS,EMAIL_ALERT=in_EMAIL_ALERT,MOBILE_ALERT=in_MOBILE_ALERT
                   WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=in_SERVER_TYPE;
         END IF;
         INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','EDIT','BANK '||in_BankCode||' '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' SERVER SETTING UPDATED',
                       SYSDATE,'',v_OldFields,v_NewFields);
         IF m_NETCHANGE OR m_SECRETCHANGE THEN
            p5_mh2h.CREATE_H2H_SERVERS_TASK(in_BankCode,in_SERVER_TYPE,'C',out_Result);
            p5_mh2h.CREATE_H2H_SERVERS_TASK(in_BankCode,in_SERVER_TYPE,'D',out_Result);
         END IF;
         IF in_EMAIL_ALERT IS NOT NULL THEN
            m_Action:='changed';
            IF in_SERVER_STATUS='N' AND in_SERVER_STATUS<>m_SERVER_STATUS THEN
               m_Action:='changed and disabled';
            END IF;
            INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                   VALUES(H2H_SEQ.NEXTVAL,in_EMAIL_ALERT,'T',DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server setting '||m_Action,
                   '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                   m_UserFullName||' ('||m_UserID||') has '||m_Action||' the '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server setting.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                   'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
         END IF;
         IF in_MOBILE_ALERT IS NOT NULL THEN
            m_Action:='changed';
            IF in_SERVER_STATUS='N' AND in_SERVER_STATUS<>m_SERVER_STATUS THEN
               m_Action:='changed and disabled';
            END IF;
            INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                   VALUES(H2H_SEQ.NEXTVAL,in_MOBILE_ALERT,'S',
                   m_UserFullName||' ('||m_UserID||') has '||m_Action||' the '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server setting. (PAS5 H2H)');
         END IF;
         IF m_ACTIVE_SERVER='Y' AND in_SERVER_STATUS<>m_SERVER_STATUS AND in_SERVER_STATUS='Y' THEN
            UPDATE /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_NDX1) */ H2H_SERVERS_TASK SET SERVER_TYPE=in_SERVER_TYPE
                   WHERE BANK_CODE=in_BankCode AND SERVER_TYPE=DECODE(in_SERVER_TYPE,'1','2','1') AND STATUS='N';
         END IF;
         out_Result:=1;
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         BEGIN
            INSERT INTO pass.H2H_SERVERS(BANK_CODE,SERVER_TYPE,PUBLIC_IP,PORT,MAC_ADDRESS,SECRET_KEY,ACTIVE_SERVER,SERVER_STATUS,EMAIL_ALERT,MOBILE_ALERT)
                   VALUES(in_BankCode,in_SERVER_TYPE,in_PUBLIC_IP,in_PORT,in_MAC_ADDRESS,in_SECRET_KEY,in_SERVER_TYPE,in_SERVER_STATUS,in_EMAIL_ALERT,in_MOBILE_ALERT);
            v_NewFields := in_PUBLIC_IP ||'^'|| TO_CHAR(in_PORT) ||'^'|| in_MAC_ADDRESS ||'^'|| in_SECRET_KEY ||'^'|| in_SERVER_STATUS ||'^'|| NVL(in_EMAIL_ALERT,' ') ||'^'|| NVL(in_MOBILE_ALERT,' ');
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','ADD','BANK '||in_BankCode||' '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' SERVER SETTING REGISTERED',
                          SYSDATE,'',v_OldFields,v_NewFields);
            p5_mh2h.CREATE_H2H_SERVERS_TASK(in_BankCode,in_SERVER_TYPE,'C',out_Result);
            p5_mh2h.CREATE_H2H_SERVERS_TASK(in_BankCode,in_SERVER_TYPE,'D',out_Result);
            IF in_EMAIL_ALERT IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                      VALUES(H2H_SEQ.NEXTVAL,in_EMAIL_ALERT,'T','New '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server added',
                      '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      m_UserFullName||' ('||m_UserID||') has added the new '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                      'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
            END IF;
            IF in_MOBILE_ALERT IS NOT NULL THEN
               INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                      VALUES(H2H_SEQ.NEXTVAL,in_MOBILE_ALERT,'S',
                      m_UserFullName||' ('||m_UserID||') has added the new '||DECODE(in_SERVER_TYPE,'1','PRIMARY','BACKUP')||' Host-to-Host Server. (PAS5 H2H)');
            END IF;
            out_Result:=1;
         EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            out_Result:=-1;
         END;
         IF out_Result=1 THEN
            BEGIN
               SELECT /*+ INDEX(BRANCHES BRANCHES_NDX) */ BRSTN INTO m_BRSTN FROM (SELECT BRSTN FROM BRANCHES WHERE FORDELETION IS NULL
                      AND BANKCODE=in_BankCode ORDER BY HEADOFCTAG DESC,BRSTN) WHERE ROWNUM<2;
            EXCEPTION WHEN NO_DATA_FOUND THEN
               m_BRSTN:=NULL;
            END;
            IF m_BRSTN IS NOT NULL THEN
               BEGIN
                  SELECT /*+ index(TempAABUsers TempAABUsers_PK) */ UserTranID INTO m_UserTranID FROM pass.TempAABUsers
                         WHERE UserID='PXGA01'||in_BankCode||'000' AND ROWNUM<2;
               EXCEPTION WHEN NO_DATA_FOUND THEN
                  INSERT INTO pass.TempAABUsers(FirstName,MiddleName,LastName,Title_Position,DefaultPassword,UserIDCreatedDate,RecordActions,
                         AdminID,AdminTimeStamp,BRSTN,UserTypeDesc,AdminConfirmID,UserTranID,LastUpdated,IDExpiration,UserID)
                         VALUES ('Host-to-Host','','Maker','Automated','CAC7A1C0CA62AF466C59B98F6A35E50A',CURRENT_DATE,'ADD',
                         m_UserID,SYSDATE,m_BRSTN,'Maker',AdminID_sequence.NEXTVAL,UserTranID_sequence.NEXTVAL,SYSDATE,0,'PXGA01'||in_BankCode||'000')
                         RETURNING UserTranID INTO m_UserTranID;
                  commit;
                  UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET RecordActions='ADD',ApproverID=m_UserID,
                         ApproverTimeStamp=SYSDATE,ApproverAction='APPROVE' WHERE UserTranID = m_UserTranID;
                  UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET RecordActions='DELETE',ApproverID=m_UserID,
                         ApproverTimeStamp=SYSDATE,ApproverAction='APPROVE',UserForDeletion='1' WHERE UserTranID = m_UserTranID;
                  IF in_EMAIL_ALERT IS NOT NULL THEN
                     INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                            VALUES(H2H_SEQ.NEXTVAL,in_EMAIL_ALERT,'T','New Host-to-Host Maker created',
                            '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                            'User ID ''PXGA01'||in_BankCode||'000'' is created by the system to act as a Host-to-Host Maker.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                            'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
                  END IF;
                  IF in_MOBILE_ALERT IS NOT NULL THEN
                     INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                            VALUES(H2H_SEQ.NEXTVAL,in_MOBILE_ALERT,'S',
                            'User ID ''PXGA01'||in_BankCode||'000'' is created by the system to act as a Host-to-Host Maker. (PAS5 H2H)');
                  END IF;
               END;
               BEGIN
                  SELECT /*+ index(TempAABUsers TempAABUsers_PK) */ UserTranID INTO m_UserTranID FROM pass.TempAABUsers
                         WHERE UserID='PXHA01'||in_BankCode||'000' AND ROWNUM<2;
               EXCEPTION WHEN NO_DATA_FOUND THEN
                  INSERT INTO pass.TempAABUsers(FirstName,MiddleName,LastName,Title_Position,DefaultPassword,UserIDCreatedDate,RecordActions,
                         AdminID,AdminTimeStamp,BRSTN,UserTypeDesc,AdminConfirmID,UserTranID,LastUpdated,IDExpiration,UserID)
                         VALUES ('Host-to-Host','','Authorizer','Automated','CAC7A1C0CA62AF466C59B98F6A35E50A',CURRENT_DATE,'ADD',
                         m_UserID,SYSDATE,m_BRSTN,'Authorizer',AdminID_sequence.NEXTVAL,UserTranID_sequence.NEXTVAL,SYSDATE,0,'PXHA01'||in_BankCode||'000')
                         RETURNING UserTranID INTO m_UserTranID;
                  commit;
                  UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET RecordActions='ADD',ApproverID=m_UserID,
                         ApproverTimeStamp=SYSDATE,ApproverAction='APPROVE' WHERE UserTranID = m_UserTranID;
                  UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET RecordActions='DELETE',ApproverID=m_UserID,
                         ApproverTimeStamp=SYSDATE,ApproverAction='APPROVE',UserForDeletion='1' WHERE UserTranID = m_UserTranID;
                  IF in_EMAIL_ALERT IS NOT NULL THEN
                     INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,SUBJECT,ALERT)
                            VALUES(H2H_SEQ.NEXTVAL,in_EMAIL_ALERT,'T','New Host-to-Host Authorizer created',
                            '*** This e-mail is system generated. Please do not reply. ***'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                            'User ID ''PXHA01'||in_BankCode||'000'' is created by the system to act as a Host-to-Host Authorizer.'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||
                            'PAS5 Host-to-Host System'||CHR(13)||CHR(10));
                  END IF;
                  IF in_MOBILE_ALERT IS NOT NULL THEN
                     INSERT INTO H2H_SERVERS_ALERT(ALERT_ID,ALERT_TO,ALERT_TYPE,ALERT)
                            VALUES(H2H_SEQ.NEXTVAL,in_MOBILE_ALERT,'S',
                            'User ID ''PXHA01'||in_BankCode||'000'' is created by the system to act as a Host-to-Host Authorizer. (PAS5 H2H)');
                  END IF;
               END;
            END IF;
         END IF;
      WHEN DUP_VAL_ON_INDEX THEN
           out_Result:=-1;
   END update_H2H_Server;

   FUNCTION
      do_checkAABUSERID(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
   BEGIN
      SELECT /*+ INDEX(AABUsers UserID) */ COUNT(UserTranID) INTO m_found FROM pass.AABUsers
             WHERE UserID=(SELECT /*+ INDEX(TempAABUsers TempAABUsers_PK) */ UserID FROM pass.TempAABUsers
                   WHERE UserTranID=in_UserTranID) AND NVL(ForDeletion,'0')<>'1';
      RETURN m_found;
   END do_checkAABUSERID;
   -- (added) end

   FUNCTION get_csvlist(in_BankCode IN pass.Branches.BankCode%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ t.UserTranID,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI:SS AM') UserIDCreatedDate,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                b.BranchName,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                t.UserID,RTRIM(t.ApproverAction) ApproverAction,
                TO_CHAR(CURRENT_DATE,'MMDDYYYY-HHMISSAM') DownloadDate
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL)
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL
         ORDER BY t.UserIDCreatedDate,t.UserID DESC;
      RETURN m_cursor;
   END get_csvlist;



   FUNCTION
      do_checkBRSTN(in_BRSTN IN pass.Branches.BRSTN%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
   BEGIN
      m_found := 0;

      SELECT /*+ index(Branches Branches_PK) */ COUNT(BRSTN) INTO m_found FROM pass.Branches
      WHERE BRSTN = in_BRSTN;

      RETURN m_found;
   END do_checkBRSTN;



   FUNCTION
      do_checkNick(in_UserID IN pass.TempAABUsers.UserID%TYPE) RETURN NUMBER
   AS
      m_UserID NUMBER;
   BEGIN
      m_UserID := 0;

      SELECT /*+ index(TempAABUsers TempUserID) */ UserTranID INTO m_UserID
      FROM pass.TempAABUsers
      WHERE UserID = UPPER(in_UserID);

      RETURN m_UserID;
   END do_checkNick;



   PROCEDURE do_update(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                       in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                       in_MiddleName IN pass.TempAABUsers.MiddleName%TYPE,
                       in_LastName IN pass.TempAABUsers.LastName%TYPE,
                       in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                       in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                       in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,

                       in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE)
   AS
   BEGIN
      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         FirstName=in_FirstName,
         MiddleName=in_MiddleName,
         LastName=in_LastName,
         Title_Position=in_Title_Position,
         BRSTN=in_BRSTN,
         AdminConfirmID=AdminID_sequence.NEXTVAL,
         LastUpdated=CURRENT_DATE,
         IDExpiration=in_IDExpiration,
         ApproverAction=''
      WHERE UserTranID = in_UserTranID;

      -- UPDATE UserIDLog SET
      --    UserIDLogID = in_UserTranID
      -- WHERE UserIDLogID = in_UserTranID;

   END do_update;



   FUNCTION do_undo(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN NUMBER
   AS
      m_state NUMBER := 0;
   BEGIN
      BEGIN
         -- (orig) UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         -- (orig)    ApproverAction = 'APPROVE',
         -- (orig)    RecordActions='UNDO'
         DELETE /*+ index(TempAABUsers TempAABUsers_PK) */ FROM pass.TempAABUsers -- (added)
         WHERE UserTranID = in_UserTranID;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            m_state := 1;
      END;

      RETURN m_state;
   END do_undo;



   PROCEDURE do_updatePass(in_UserTranID pass.TempAABUsers.UserTranID%TYPE,
                           in_DefaultPassword pass.TempAABUsers.DefaultPassword%TYPE,
                           in_AdminID IN pass.TempAABUsers.AdminID%TYPE)
   AS
   BEGIN
      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         DefaultPassword = in_DefaultPassword,
         LastUpdated = CURRENT_DATE,
         AdminID = in_AdminID,
         ApproverAction = '',
         AdminConfirmID=AdminID_sequence.NEXTVAL,
         AdminTimeStamp = CURRENT_DATE
      WHERE UserTranID = in_UserTranID;
   END do_updatePass;



   FUNCTION do_GetForDownload(in_BankCode IN pass.Branches.BankCode%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ t.UserTranID,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI:SS AM') UserIDCreatedDate,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                b.BranchName,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                t.UserID,
                RTRIM(t.ApproverAction) ApproverAction
         FROM pass.TempAABUsers t
         LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL)
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL
         ORDER BY t.UserIDCreatedDate,t.UserID DESC;
      RETURN m_cursor;
   END do_GetForDownload;



   FUNCTION get_viewInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                         in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
                TO_CHAR(t.ApproverTimeStamp,'MM/DD/YYYY HH:MI AM') ApproverTimeStamp,
                t.BRSTN,
                b.BranchName,
                INITCAP(t.FirstName) FirstName,
                INITCAP(t.MiddleName) MiddleName,
                INITCAP(t.LastName) LastName,
                INITCAP(t.Title_Position) Title_Position,
                t.UserID,REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdminTimeStamp,
                t.AdminID,
                t.ApproverID,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                RTRIM(t.ApproverAction) ApproverAction,
                get_user_status(t.ApproverAction, t.RecordActions) Status,
                t.ApproverConfirmID,
                t.AdminConfirmID,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                t.ApproverComment,
                t.IDExpiration
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;

      RETURN m_cursor;
   END get_viewInfo;


   FUNCTION get_confirmInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                            in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
     m_cursor types.ref_cursor;
   BEGIN
     OPEN m_cursor FOR
        SELECT /*+ index(t TempAABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
               t.BRSTN,
               b.BranchName,
               INITCAP(t.FirstName) FirstName,
               INITCAP(t.MiddleName) MiddleName,
               INITCAP(t.LastName) LastName,
               INITCAP(t.Title_Position) Title_Position,
               t.UserID,REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
               TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdminTimeStamp,
               t.AdminID,
               TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
               INITCAP(RTRIM(t.RecordActions)) RecordActions,
               RTRIM(t.ApproverAction) ApproverAction,
               TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
               t.AdminConfirmID,
               t.ApproverID,
               TO_CHAR(t.UserIDCreatedDate + t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration
        FROM pass.TempAABUsers t
           LEFT JOIN pass.Branches b ON b.brstn = t.brstn
        WHERE b.BankCode = in_BankCode
           AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
           AND t.UserTranID = in_UserTranID;

     RETURN m_cursor;
   END get_confirmInfo;



   FUNCTION get_infoForEdit(in_BankCode IN pass.Branches.BankCode%TYPE,
                            in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
                TO_CHAR(t.ApproverTimeStamp,'MM/DD/YYYY HH:MI AM') ApproverTimeStamp,
                t.BRSTN,
                b.BranchName,
                INITCAP(t.FirstName) FirstName,
                INITCAP(t.MiddleName) MiddleName,
                INITCAP(t.LastName) LastName,
                INITCAP(t.Title_Position) Title_Position,
                RTRIM(t.UserID) UserID,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdminTimeStamp,
                t.AdminID,
                t.ApproverID,TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                RTRIM(t.ApproverAction) ApproverAction,
                t.ApproverConfirmID,
                t.AdminConfirmID,TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                t.IDExpiration,
                t.ApproverComment
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.UserTranID = in_UserTranID;

      RETURN m_cursor;
   END get_infoForEdit;



   FUNCTION get_details(in_BankCode IN pass.Branches.BankCode%TYPE,
                        o_numrows OUT NUMBER,
                        io_page IN OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserTranID) INTO o_numrows
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.BRSTN = t.BRSTN
         WHERE b.BankCode = in_BankCode
            -- (orig) AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL OR TRIM(t.ApproverAction)='')
            AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL) -- (added)
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer');
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_numrows := 0;
      END;

      IF io_page < 1 THEN
         io_page := 1;
      END IF;

      IF o_numrows > 0 THEN
         IF io_page > o_numrows THEN
            io_page := o_numrows;
         END IF;
         BEGIN
            OPEN m_cursor FOR
               SELECT rn,
                      UserTranID,
                      TO_CHAR(UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                      INITCAP(RTRIM(RecordActions)) RecordActions,
                      BranchName,
                      REPLACE(UserTypedesc,'-',' ') UserTypeDesc,
                      UserID,
                      RTRIM(ApproverAction) ApproverAction,
                      TO_CHAR(LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated
               FROM (SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ ROWNUM rn,
                            t.UserTranID,
                            t.UserIDCreatedDate,
                            t.RecordActions,
                            b.BranchName,
                            t.UserTypedesc,
                            t.UserID,
                            t.ApproverAction,
                            t.LastUpdated
                     FROM pass.TempAABUsers t
                     LEFT JOIN pass.Branches b ON b.BRSTN = t.BRSTN
                     WHERE b.BankCode = in_BankCode
                        -- (orig) AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL OR TRIM(t.ApproverAction)='')
                        AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL) -- (added)
                        AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
                     ORDER BY t.RecordActions DESC)
               WHERE rn BETWEEN (io_page * 14 - 14) AND (io_page * 14);
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               o_numrows := 0;
         END;
      END IF;

      RETURN m_cursor;
   END get_details;



   PROCEDURE get_summary(in_BankCode IN pass.Branches.BankCode%TYPE,
                         o_tdone OUT NUMBER,
                         o_tpending OUT NUMBER,
                         o_treject OUT NUMBER,
                         o_edone OUT NUMBER,
                         o_epending OUT NUMBER,
                         o_ereject OUT NUMBER,
                         o_ddone OUT NUMBER,
                         o_dpending OUT NUMBER,
                         o_dreject OUT NUMBER,
                         o_ldone OUT NUMBER,
                         o_lpending OUT NUMBER,
                         o_lreject OUT NUMBER,
                         o_udone OUT NUMBER,
                         o_upending OUT NUMBER,
                         o_ureject OUT NUMBER,
                         o_changed OUT NUMBER,
                         o_total_users OUT NUMBER,
                         o_total_locked OUT NUMBER)
   AS
   BEGIN
      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_tpending
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.BRSTN = t.BRSTN
         WHERE b.BankCode = in_BankCode
            AND t.RecordActions='ADD'
            AND t.ApproverAction IS NULL
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_tpending := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_treject
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions='ADD'
            AND t.ApproverAction='REJECT'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
             o_treject := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_tdone
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions='ADD'
            AND t.ApproverAction = 'APPROVE'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_tdone := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_epending
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.RecordActions='EDIT'
            AND t.ApproverAction IS NULL
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_epending := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_ereject
         FROM pass.TempAABUsers t
         LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions='EDIT'
            AND t.ApproverAction='REJECT'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_ereject := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_edone
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'EDIT'
            AND t.ApproverAction = 'APPROVE'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_edone := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_dpending
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.RecordActions = 'DELETE'
            AND t.ApproverAction IS NULL
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            AND t.UserForDeletion IS NOT NULL; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_dpending := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_dreject
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'DELETE'
            AND t.ApproverAction='REJECT'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            AND t.UserForDeletion IS NOT NULL; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_dreject := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_ddone
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'DELETE'
            AND t.ApproverAction = 'APPROVE'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            AND t.UserForDeletion IS NOT NULL; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_ddone := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_lpending
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.RecordActions = 'LOCK'
            AND t.ApproverAction IS NULL
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_lpending := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_lreject
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'LOCK'
            AND t.ApproverAction='REJECT'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_lreject := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_ldone
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'LOCK'
            AND t.ApproverAction = 'APPROVE'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_ldone := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_upending
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.RecordActions = 'UNLOCK'
            AND t.ApproverAction IS NULL
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_upending := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_ureject
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'UNLOCK'
            AND t.ApproverAction='REJECT'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_ureject := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_udone
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TO_CHAR(t.UserIDCreatedDate,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND TO_CHAR(t.ApproverTimeStamp,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD') -- (added)
            AND t.RecordActions = 'UNLOCK'
            AND t.ApproverAction = 'APPROVE'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            -- (orig) AND t.UserForDeletion IS NULL;
            ; -- (added)
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_udone := 0;
      END;

      BEGIN
         SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_changed
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TO_CHAR(t.LastUpdated,'YYYY-MON-DD') = TO_CHAR(CURRENT_DATE,'YYYY-MON-DD')
            AND t.RecordActions = 'CHANGEPW'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_changed := 0;
      END;

      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_total_users
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.Bankcode = in_BankCode
            AND t.ForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_total_users := 0;
      END;

      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserID) INTO o_total_locked
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND t.Locked = '1'
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer');
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_total_locked := 0;
      END;
  END get_summary;



  FUNCTION get_lastlogin(in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
  AS
     m_cursor types.ref_cursor;
  BEGIN
     OPEN m_cursor FOR
        SELECT /*+ index(AABUsers AABUsers_PK) */ TO_CHAR(LastLogin,'MM/DD/YYYY HH:MI AM') LastLogin,
               LastLoginStatus
        FROM pass.AABUsers
        WHERE UserTranID = in_UserTranID;
     RETURN m_cursor;
  END get_lastlogin;



  FUNCTION dget_details(in_BankCode IN pass.Branches.BankCode%TYPE,
                        o_numrows OUT NUMBER) RETURN types.ref_cursor
  AS
     m_cursor types.ref_cursor;
  BEGIN
     BEGIN
        SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserTranID) INTO o_numrows
        FROM pass.TempAABUsers t
           LEFT JOIN pass.Branches b ON b.BRSTN = t.BRSTN
        WHERE b.BankCode = in_BankCode
           AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL)
           AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer');
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
           o_numrows := 0;
     END;
     IF o_numrows > 0 THEN
        BEGIN
           OPEN m_cursor FOR
           SELECT /*+ index(t TempAABUsers_NDX) index(b Branches_NDX) */ t.UserTranID,
                  TO_CHAR(t.UserIDCreatedDate,'YYYY-MM-DD HH:MI:SS AM') UserIDCreatedDate,
                  t.RecordActions,
                  b.BranchName,
                  t.UserTypeDesc,
                  t.UserID,
                  (t.FirstName || ' ' || t.LastName) UserFullname,
                  get_user_status(t.ApproverAction,t.RecordActions) UserStatus,
                  t.LastUpdated
           FROM pass.TempAABUsers t
              LEFT JOIN pass.Branches b ON b.BRSTN = t.BRSTN
           WHERE b.BankCode = in_BankCode
              AND (t.ApproverAction = 'REJECT' OR t.ApproverAction IS NULL)
              AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
           ORDER BY t.RecordActions DESC;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
              o_numrows := 0;
        END;
     END IF;
     RETURN m_cursor;
  END dget_details;

END p5_m1sm;
/
CREATE OR REPLACE PACKAGE BODY p5_m1mn
AS

   FUNCTION
       remove_branches(in_BankCode IN pass.BankList.BankCode%TYPE,
                       in_BRSTN IN pass.Branches.BRSTN%TYPE,
                       o_state OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
      -- (orig) vBRSTN Varchar2(9);
      -- (orig) vBranchName Varchar2(70);
      -- (orig) vBranchAddress Varchar2(100);
      -- (orig) vHeadOfcTag Varchar2(1);
      -- (orig) vRegion Varchar2(2);
      -- (orig) vBankCode Varchar2(3);
      m_count NUMBER;
      m_count1 NUMBER;
      m_count2 NUMBER;
   BEGIN
        -- updated query 07/24/2009
        IF substr(in_BRSTN, 3, 3) <> TRIM(in_BankCode) THEN
           o_state := 1;
        ELSE
         SELECT /*+ index(Branches Branches_PK) */ count(BRSTN) INTO m_count FROM pass.Branches WHERE BRSTN=in_BRSTN ;
         SELECT /*+ index(AABUsers AABUsers_NDX) */ count(BRSTN) INTO m_count1 FROM pass.AABUsers WHERE BRSTN=in_BRSTN ;
         SELECT /*+ index(TempAABUsers TempAABUsers_NDX) */ count(BRSTN) INTO m_count2 FROM pass.TempAABUsers
             -- (orig) WHERE BRSTN=in_BRSTN AND ( ApproverAction IS NULL OR TRIM(ApproverAction)='' );
             WHERE BRSTN=in_BRSTN AND ApproverAction IS NULL;

         IF m_count > 0 THEN
            IF m_count1>0 OR m_count2>0 THEN
               o_state := 2;
             ELSE
                 o_state := 0;
               UPDATE /*+ index(Branches Branches_PK) */ pass.Branches SET ForDeletion = '1',
                                        DeleteDate = Current_date
                  WHERE BRSTN=in_BRSTN;
             END IF;
         ELSE
            o_state := 1;
         END IF;
      END IF;

      OPEN m_cursor FOR
         SELECT /*+ index(MasterBranches MasterBranches_PK) */ BRSTN, BranchName, BranchAddress, HeadOfcTag FROM pass.MasterBranches WHERE BRSTN=in_BRSTN;
      RETURN m_cursor;

   END remove_branches;



   FUNCTION
       checkThenADD_branches(in_BankCode IN pass.BankList.BankCode%TYPE,
                      in_BRSTN IN pass.Branches.BRSTN%TYPE,
                      o_state OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
      vBRSTN Varchar2(9);
      vBranchName Varchar2(70);
      vBranchAddress Varchar2(100);
      vHeadOfcTag Varchar2(1);
      vRegion Varchar2(2);
      vBankCode Varchar2(3);
      m_count NUMBER;
      m_count1 NUMBER;
   BEGIN
        IF substr(in_BRSTN, 3, 3) <> TRIM(in_BankCode) THEN
           o_state := 1;
        ELSE
         -- updated query 07/23/2009
         SELECT /*+ index(MasterBranches MasterBranches_PK) */ count(BRSTN) INTO m_count FROM pass.MasterBranches
            WHERE BRSTN=in_BRSTN and BRSTN NOT IN ( select /*+ index(BRANCHES BRANCHES_NDX) */ BRSTN from pass.BRANCHES WHERE BankCode = in_BankCode AND ForDeletion IS NULL );

         IF m_count > 0 THEN
            o_state := 0;
            SELECT /*+ index(Branches Branches_PK) */ count(BRSTN) INTO m_count1 from pass.BRANCHES WHERE BRSTN=in_BRSTN;
            IF m_count1 > 0 THEN
               UPDATE /*+ index(Branches Branches_PK) */ pass.BRANCHES SET ForDeletion = NULL, DeleteDate = NULL WHERE BRSTN=in_BRSTN;
            ELSE
               OPEN m_cursor FOR
                  SELECT /*+ index(MasterBranches MasterBranches_PK) */ BRSTN, BranchName, BranchAddress, HeadOfcTag, TO_CHAR(TO_NUMBER(substr(BRSTN,1,2))) Region, substr(BRSTN,3,3) BankCode
                     FROM pass.MasterBranches WHERE BRSTN=in_BRSTN;
               FETCH m_cursor INTO vBRSTN, vBranchName, vBranchAddress, vHeadOfcTag, vRegion, vBankCode;
               CLOSE m_cursor;
               INSERT INTO pass.BRANCHES (BRSTN, BranchName, BranchAddress, HeadOfcTag, RegionCode, BankCode)
                  VALUES (vBRSTN, vBranchName, vBranchAddress, vHeadOfcTag, TRIM(vRegion), vBankCode);
            END IF;
         ELSE
            o_state := 1;
         END IF;
            OPEN m_cursor FOR
               SELECT /*+ index(Branches Branches_PK) */ BRSTN, BranchName, BranchAddress, HeadOfcTag FROM pass.Branches WHERE BRSTN = in_BRSTN;
      END IF;

      RETURN m_cursor;
   END checkThenADD_branches;



   FUNCTION get_InfoForEdit(in_BankCode IN pass.Branches.BankCode%TYPE,
                            in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
           t.BRSTN,
           b.BranchName,
           INITCAP(NVL(t.FirstName,'')) FirstName,
            INITCAP(NVL(t.MiddleName,'')) MiddleName,
            INITCAP(NVL(t.LastName,'')) LastName,
           INITCAP(NVL(t.Title_Position,'')) Title_Position,
           RTRIM(t.UserID) UserID,
            t.UserTypeDesc,
            TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
           NVL(t.IDExpiration,1) IDExpiration
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;

      RETURN m_cursor;
   END get_InfoForEdit;



   FUNCTION
      do_checkRole(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                   in_newRole IN varchar2) RETURN NUMBER
   AS
      m_roleCode varchar2(2);
      m_id varchar2(12);
   BEGIN
      m_roleCode := pass.p5_m1mn.get_roleCode(in_newRole);
      -- (orig) m_id := '';
      m_id := NULL; -- (added)

      IF trim(m_roleCode) = '-1' THEN
         RETURN 0;
      ELSE
         SELECT /*+ index(AABUsers AABUsers_PK) */ userid into m_id FROM pass.AABUsers WHERE UserTranID = in_UserTranID;
         -- (orig) IF m_id = '' OR SUBSTR(m_id, 3, 1) <> m_roleCode THEN
         IF m_id IS NULL OR SUBSTR(m_id, 3, 1) <> m_roleCode THEN -- (added)
           RETURN 1;
    ELSE
           RETURN 0;
    END IF;
      END IF;
   END do_checkRole;



   FUNCTION
      do_GetUserID(in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN VARCHAR2

   AS
     m_userCount NUMBER;
     m_userid VARCHAR2(12);
   BEGIN
      m_userCount := 0;

      SELECT /*+ index(AABUsers AABUsers_PK) */ count(UserID) into m_userCount FROM pass.AABUsers WHERE UserTranID = in_UserTranID;

      IF m_userCount = 0 THEN
         RETURN '0';
      ELSE
         SELECT /*+ index(AABUsers AABUsers_PK) */ UserID INTO m_userid FROM pass.AABUsers WHERE UserTranID = in_UserTranID;
         RETURN m_userID;
      END IF;

   END do_GetUserID;



   FUNCTION
      do_checkUserID(in_Role  IN varchar2,
                     in_BRSTN IN varchar2) RETURN VARCHAR2
   AS
      m_roleCode varchar2(2);
      m_userCount NUMBER;
      m_CountStr varchar2(36);
      m_FreeID varchar2(2);
      m_cnt NUMBER;

   BEGIN
      m_userCount := 0;
      m_cnt := 0;
      m_FreeID := '';
      -- (orig) m_roleCode := '-1';
      m_CountStr := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      m_roleCode := pass.p5_m1mn.get_roleCode(in_Role);

      IF trim(m_roleCode) = '-1' THEN
         RETURN '-1';
      ELSE
           SELECT count(UserID) into m_userCount
                -- (orig) FROM ( SELECT DISTINCT Userid,BRSTN FROM ( SELECT /*+ index(AABUsers AABUsers_NDX) */ UserID,BRSTN FROM pass.AABUsers
                -- (orig)                                       UNION SELECT /*+ index(TempAABUsers TempAABUsers_NDX) */ UserID,BRSTN FROM pass.TempAABUsers ) )
                FROM ( SELECT DISTINCT Userid,BRSTN FROM ( SELECT /*+ index(AABUsers AABUsers_NDX) */ UserID,BRSTN FROM pass.AABUsers WHERE ForDeletion IS NULL -- (added)
                                                      UNION SELECT /*+ index(TempAABUsers TempAABUsers_NDX) */ UserID,BRSTN FROM pass.TempAABUsers WHERE UserForDeletion IS NULL AND NVL(ApproverAction,'APPROVE')<>'REJECT' ) ) -- (added)
                WHERE SUBSTR(UserID,3,1) = m_roleCode and BRSTN = in_BRSTN;

         IF m_userCount < 36 THEN
            FOR i IN 1 .. 36
                LOOP
                m_FreeID := m_roleCode || substr(m_CountStr,i,1);
                SELECT count(UserID) into m_cnt
                   -- (orig) FROM ( SELECT DISTINCT Userid,BRSTN FROM ( SELECT /*+ index(AABUsers AABUsers_NDX) */ UserID,BRSTN FROM pass.AABUsers
                   -- (orig)                                    UNION SELECT /*+ index(TempAABUsers TempAABUsers_NDX) */ UserID,BRSTN FROM pass.TempAABUsers ) )
                   FROM ( SELECT DISTINCT Userid,BRSTN FROM ( SELECT /*+ index(AABUsers AABUsers_NDX) */ UserID,BRSTN FROM pass.AABUsers WHERE ForDeletion IS NULL -- (added)
                                                      UNION SELECT /*+ index(TempAABUsers TempAABUsers_NDX) */ UserID,BRSTN FROM pass.TempAABUsers WHERE UserForDeletion IS NULL AND NVL(ApproverAction,'APPROVE')<>'REJECT' ) ) -- (added)
                   WHERE SUBSTR(UserID,3,2) = m_FreeID and BRSTN = in_BRSTN;
                  IF m_cnt = 0 THEN
                     EXIT;
                   END IF;
             END LOOP;
--                RETURN substr(in_SessID,1,2) || m_FreeID || substr(in_BRSTN,1,8);
                RETURN 'PA' || m_FreeID || substr(in_BRSTN,1,8);
          ELSE -- (added)
             RETURN '0'; -- (added)
          END IF;
      END IF;

   END do_CheckUserID;



   FUNCTION
      get_roleCode(in_Role IN varchar2) RETURN VARCHAR2
   AS
      out_code VARCHAR2(2);
   BEGIN

-- modified in_role "Operator" to "Oper" 06/09/2009

      IF trim(in_Role) = 'Branch-Admin' THEN
         out_code := 'D';
      ELSIF trim(in_Role) = 'Branch-Approver' THEN
         out_code := 'E';
      ELSIF trim(in_Role) = 'Bank-Officer' THEN
         out_code := 'C';
      ELSIF trim(in_Role) = 'Maker' THEN
         out_code := 'G';
      ELSIF trim(in_Role) = 'Authorizer' THEN
         out_code := 'H';
      ELSIF trim(in_Role) = 'Branch-Officer' THEN
         out_code := 'F';
      ELSIF trim(in_Role) = 'Admin' THEN
         out_code := 'I';
      ELSIF trim(in_Role) = 'Oper' THEN
         out_code := 'K';
      ELSIF trim(in_Role) = 'Bank-Admin' THEN
         out_code := 'A';
      ELSIF trim(in_Role) = 'Bank-Approver' THEN
         out_code := 'B';
      ELSIF trim(in_Role) = 'Host-to-Host' THEN -- (added)
         out_code := 'X'; -- (added)
      ELSE
         out_code := '-1';
      END IF;

      RETURN out_code;
   END get_roleCode;



   FUNCTION get_csvlist(in_BankCode IN pass.Branches.BankCode%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ t.UserTranID,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI:SS AM') UserIDCreatedDate,
                b.BranchName,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                t.UserID,
                TO_CHAR(CURRENT_DATE,'MMDDYYYY-HHMISSAM') DownloadDate
         FROM pass.AABUsers t
         LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.ForDeletion IS NULL
         ORDER BY t.UserIDCreatedDate,t.UserID DESC;

      RETURN m_cursor;

   END get_csvlist;



   FUNCTION do_removeUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                          in_AdminID IN pass.TempAABUsers.AdminID%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_usertypedesc pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      m_found := 0;
      SELECT /*+ index(AABUsers AABUsers_PK) */ count(UserID) INTO m_found FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;

      IF m_found > 0 THEN
         OPEN m_cursor FOR
             SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, UserTypeDesc FROM pass.AABUsers
               WHERE UserTranID = in_UserTranID;
         IF m_cursor%ISOPEN THEN
            FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_usertypedesc;
            CLOSE m_cursor;
         END IF;
         UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
            UserID = m_userid,
            BRSTN = m_BRSTN,
            RecordActions = 'DELETE',
            UserForDeletion = '1',
            ApproverAction = '',
            ApproverComment = '',
             UserTypeDesc = m_usertypedesc,
            AdminID = in_AdminID,
            AdminTimeStamp = CURRENT_DATE,
             LastUpdated = CURRENT_DATE
         WHERE UserTranID = in_UserTranID;

         IF SQL%NOTFOUND THEN
            INSERT INTO pass.TempAABUsers
               ( UserTranID, UserID, LastName, BRSTN,    RecordActions, UserForDeletion, ApproverAction, AdminID, AdminTimeStamp, ApproverComment, UserTypeDesc, LastUpdated )
            VALUES ( in_UserTranID,
                     m_userid,
                     m_lastname,
                     m_BRSTN,
                     'DELETE',
                     '1',
                     '',
                     in_AdminID,
                     CURRENT_DATE,
                     '',
           m_usertypedesc,
           CURRENT_DATE);
         END IF;
      END IF;
      RETURN m_found;
   END do_removeUser;



   FUNCTION do_lockUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                        in_AdminID IN pass.TempAABUsers.AdminID%TYPE) RETURN NUMBER
   AS
      -- (orig) m_found NUMBER;
      m_lock pass.AABUsers.Locked%TYPE;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      -- (orig) m_found := 0;
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, Locked, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_lock, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions = CASE WHEN m_lock = '1' THEN 'UNLOCK'
                                                 ELSE 'LOCK'
                         END,
         Locked = CASE WHEN m_lock = '1' THEN ''
                                          ELSE '1'
                  END,
         ApproverAction = '',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN,    RecordActions, Locked, ApproverAction, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  CASE WHEN m_lock = '1' THEN 'UNLOCK'
                                          ELSE 'LOCK'
                  END,
                  CASE WHEN m_lock = '1' THEN ''
                                          ELSE '1'
                  END,
                  '',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '' );
      END IF;
      RETURN 0;
   END do_lockUser;



   FUNCTION do_findBRSTN(in_BRSTN IN pass.Branches.BRSTN%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
   BEGIN

      m_found := 0;

      SELECT /*+ index(Branches Branches_PK) */ COUNT(BRSTN) INTO m_found FROM pass.Branches
      WHERE BRSTN = in_BRSTN;

      RETURN m_found;

   END do_findBRSTN;



   FUNCTION do_findUser(in_UserID IN pass.TempAABUsers.UserID%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
   BEGIN
      m_found := 0;

      SELECT /*+ index(TempAABUsers TempUserID) */ COUNT(UserID) INTO m_found FROM pass.TempAABUsers
      WHERE UserID = UPPER(in_UserID);

      RETURN m_found;

   END do_findUser;



   FUNCTION do_AddNewUser(in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                          in_MiddleName IN pass.TempAABusers.MiddleName%TYPE,
                          in_LastName IN pass.TempAABUsers.LastName%TYPE,
                          in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                          in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE,
                          in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                          in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                          in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,
                          in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE,
                             in_UserIDstr IN pass.TempAABUsers.UserID%TYPE) RETURN pass.TempAABUsers.UserTranID%TYPE
   AS
      m_UserTranID pass.TempAABUsers.UserTranID%TYPE;
   BEGIN
      INSERT INTO pass.TempAABUsers
                  (FirstName,
                   MiddleName,
                   LastName,
                 Title_Position,
                    DefaultPassword,
                   UserIDCreatedDate,
                 RecordActions,
                   AdminID,
                   AdminTimeStamp,
                   BRSTN,
                 UserTypeDesc,
                   AdminConfirmID,
                   LastUpdated,
                   IDExpiration,
                   UserID)
         VALUES (in_FirstName,
                  in_MiddleName,
                  in_LastName,
                  in_Title_Position,
                  in_DefaultPassword,
                  CURRENT_DATE,
                'ADD',
                  in_AdminID,
                  CURRENT_DATE,
                  in_BRSTN,
                in_UserTypeDesc,
                  AdminID_sequence.NEXTVAL,
                  CURRENT_DATE,
                  in_IDExpiration,
                  in_UserIDstr)
      RETURNING UserTranID INTO m_UserTranID;

      -- INSERT INTO UserIDLog (UserIDLogID,UserID)
      --   (SELECT UserTranID,UserID
      --    FROM TempAABUsers
      --    WHERE UserID = in_UserID);

      RETURN m_UserTranID;
   END do_addNewUser;



   FUNCTION
      do_UpdateUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                    in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                    in_MiddleName IN pass.TempAABusers.MiddleName%TYPE,
                    in_LastName IN pass.TempAABUsers.LastName%TYPE,
                    in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                    in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                    in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                    in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,
                    in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE,
                    in_UserID IN pass.TempAABUsers.UserID%TYPE) RETURN pass.TempAABUsers.UserTranID%TYPE

   AS
      m_cnt NUMBER;
   BEGIN
      m_cnt := 0;
      SELECT count(UserTranID) INTO m_cnt FROM pass.TempAABUsers WHERE UserTranID=in_UserTranID;

      IF m_cnt <> 0 THEN
         UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
            FirstName=in_FirstName,
            MiddleName=in_MiddleName,
            LastName=in_LastName,
            Title_Position=in_Title_Position,
            RecordActions='EDIT',
            ApproverAction=NULL,
            AdminID=in_AdminID,
            AdminTimeStamp=CURRENT_DATE,
            BRSTN=in_BRSTN,
            UserTypeDesc=in_UserTypeDesc,
            AdminConfirmID=AdminID_sequence.NEXTVAL,
            LastUpdated=CURRENT_DATE,
            IDExpiration=in_IDExpiration,
            UserID=in_UserID
         WHERE UserTranID = in_UserTranID;
      ELSE
         INSERT INTO pass.TempAABUsers ( UserTranID,
                FirstName,
                     MiddleName,
                     LastName,
                     Title_Position,
                     RecordActions,
                     ApproverAction,
                     AdminID,
                     AdminTimeStamp,
                     BRSTN,
                     UserTypeDesc,
                     AdminConfirmID,
                     LastUpdated,
                     IDExpiration,
                     UserID )
    VALUES ( in_UserTranID,
        in_FirstName,
        in_MiddleName,
             in_LastName,
        in_Title_Position,
             'EDIT',
        NULL,
             in_AdminID,
             CURRENT_DATE,
             in_BRSTN,
        in_UserTypeDesc,
             AdminID_sequence.NEXTVAL,
        CURRENT_DATE,
             in_IDExpiration,
        in_UserID );
      END IF;

      IF SQL%NOTFOUND THEN
         RETURN 1;
      ELSE
         RETURN 0;
      END IF;
   END do_UpdateUser;



   FUNCTION do_UndoUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN NUMBER
   AS
   BEGIN
      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         (UserID,
          FirstName,
          MiddleName,
          LastName,
          Title_Position,
          DefaultPassword,
          IDExpiration,
          UserTypeDesc) =
          (SELECT /*+ index(AABUsers AABUsers_PK) */ UserID,
                  FirstName,
                  MiddleName,
                  LastName,
                  Title_Position,
                  DefaultPassword,
                  IDExpiration,
                  UserTypeDesc
           FROM pass.AABUsers
           WHERE UserTranID = in_UserTranID),
           ApproverAction = 'APPROVE',
           RecordActions='ADD'
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         RETURN 1;
      ELSE
         RETURN 0;
      END IF;

   END do_UndoUser;



   FUNCTION do_UndoChange(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN pass.TempAABUsers.UserTranID%TYPE
   AS
   BEGIN
      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions='UNDO',
         AdminTimeStamp=CURRENT_DATE,
         AdminConfirmID=AdminID_sequence.NEXTVAL,
         LastUpdated=CURRENT_DATE
      WHERE UserTranID = in_UserTranID;
      commit;
      IF SQL%NOTFOUND THEN
         RETURN 1;
      ELSE
         RETURN 0;
      END IF;
   END do_UndoChange;



   FUNCTION do_changePass (in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                           in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                           in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE) RETURN NUMBER
   AS
      -- (orig) m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions = 'EDIT',
         ApproverAction = '',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE,
         DefaultPassword = in_DefaultPassword,
         ChangePW = '1'
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN, RecordActions, ApproverAction, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment, DefaultPassword, ChangePW )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  'EDIT',
                  '',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '',
                  in_DefaultPassword,
                  '1' );
      END IF;
      RETURN 1;
   END do_changePass;


   FUNCTION do_resetPass(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                         in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                         in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE) RETURN NUMBER
   AS
      -- (orig) m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions = 'EDIT',
         ApproverAction = '',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE,
         DefaultPassword = in_DefaultPassword,
         USERIDCREATEDDATE = CURRENT_DATE,
         ChangePW = '1'
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN, RecordActions, ApproverAction, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment, DefaultPassword, USERIDCREATEDDATE, ChangePW )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  'EDIT',
                  '',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '',
                  in_DefaultPassword,
                  CURRENT_DATE,
                  '1' );
      END IF;
      RETURN 1;
   END do_resetPass;


   FUNCTION get_InfoForEditFromAABUsers(in_BankCode IN pass.Branches.BankCode%TYPE,
                            in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
           TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') CreationDate,
                t.BRSTN,
                INITCAP(b.BranchName) BranchName,
                INITCAP(t.FirstName) FirstName,
                INITCAP(t.MiddleName) MiddleName,
                INITCAP(t.LastName) LastName,
                INITCAP(t.Title_Position) Title_Position,
                t.UserID,
                t.AuthorizationLimit,
      TRIM(t.UserTypeDesc) UserTypeDesc,
                INITCAP(RTRIM(t.LastRecordAction)) RecordActions,
                TO_CHAR(t.ExpirationDate,'MM/DD/YYYY HH:MI AM') IDExpiration
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;
      RETURN m_cursor;
   END get_InfoForEditFromAABUsers;



   FUNCTION get_branches(in_BankCode IN pass.BankList.BankCode%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(b Branches_NDX) index(l BankList_PK) */ b.BRSTN,
                b.BranchName
         FROM pass.Branches b
            LEFT JOIN pass.BankList l ON l.BankCode = b.BankCode
         WHERE l.bankcode = in_BankCode
    ORDER BY b.BRSTN;
      RETURN m_cursor;
   END get_branches;



   FUNCTION get_viewInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                         in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
           TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') CreationDate,
                t.BRSTN,
                INITCAP(b.BranchName) BranchName,
                INITCAP(t.FirstName) FirstName,
                INITCAP(t.MiddleName) MiddleName,
                INITCAP(t.LastName) LastName,
                INITCAP(t.Title_Position) Title_Position,
                t.UserID,
                TRIM(t.UserTypeDesc) UserTypeDesc,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                get_active_status(t.ForDeletion,t.Locked) ActiveUserStatus,
                INITCAP(RTRIM(t.LastRecordAction)) RecordActions,
                TO_CHAR(t.UserIDCreatedDate+t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration,
                t.IDExpiration Expiry
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;

      RETURN m_cursor;
   END get_viewInfo;


   FUNCTION get_confirmInfo(in_BankCode IN pass.Branches.BankCode%TYPE,
                            in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_PK) index(b Branches_NDX) */ t.UserTranID,
                t.BRSTN,
                b.BranchName,
                INITCAP(t.FirstName) FirstName,
                INITCAP(t.MiddleName) MiddleName,
                INITCAP(t.LastName) LastName,
                INITCAP(t.Title_Position) Title_Position,
                t.UserID,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdminTimeStamp,
                t.AdminID,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                RTRIM(t.ApproverAction) ApproverAction,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                t.AdminConfirmID,
                t.ApproverID,
                TO_CHAR(t.UserIDCreatedDate + t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;

         RETURN m_cursor;
   END get_confirmInfo;



   FUNCTION get_list(in_BankCode IN pass.Branches.BankCode%TYPE,
                     o_numrows OUT NUMBER,
                     io_page IN OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ COUNT(t.UserTranID) INTO o_numrows
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.ForDeletion IS NULL
         ORDER BY t.brstn, t.UserID ASC;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_numrows := 0;
      END;

      IF io_page < 1 THEN
         io_page := 1;
      END IF;

      IF o_numrows > 0 THEN
         BEGIN
            OPEN m_cursor FOR
               SELECT rn,
                      UserTranID,
                      UserID,
                      FirstName,
                      LastName,
                      UserTypeDesc,
                        BRSTN,
                      BranchName,
                      Locked,
                      ActiveUserStatus
               FROM (SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ ROWNUM rn,
                            t.UserTranID,
                            t.UserID,
                            INITCAP(t.FirstName) FirstName,
                            INITCAP(t.LastName) LastName,
                            REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                               t.BRSTN,
                            b.BranchName,
                            t.Locked,
                            get_active_status(t.ForDeletion,t.Locked) ActiveUserStatus
                     FROM pass.AABUsers t
                        LEFT JOIN pass.Branches b ON b.brstn = t.brstn
                     WHERE b.BankCode = in_BankCode
                        AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
                        AND t.ForDeletion IS NULL
                     ORDER BY t.brstn,t.UserID ASC)
               WHERE rn BETWEEN (io_page * 14 - 14) AND (io_page * 14);
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               o_numrows := 0;
         END;
      END IF;
      RETURN m_cursor;
   END get_list;



   FUNCTION dget_list(in_BankCode IN pass.Branches.BankCode%TYPE,
                      o_numrows OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ COUNT(UserTranID) INTO o_numrows
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.ForDeletion IS NULL
         ORDER BY t.UserID DESC;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_numrows := 0;
      END;

      IF o_numrows > 0 THEN
         BEGIN
            OPEN m_cursor FOR
               SELECT /*+ index(t AABUsers_NDX) index(b Branches_NDX) */ ROWNUM rn,
                      t.UserTranID,
                      t.UserID,
                      INITCAP(t.FirstName) FirstName, -- (added)
                      INITCAP(t.LastName) LastName, -- (added)
                      REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                      b.BRSTN,
                      get_active_status(t.ForDeletion,t.Locked) UserStatus
               FROM pass.AABUsers t
                  LEFT JOIN pass.Branches b ON b.brstn = t.brstn
               WHERE b.BankCode = in_BankCode
                  AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
                  AND t.ForDeletion IS NULL
               ORDER BY t.UserID DESC;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               o_numrows := 0;
         END;
      END IF;
      RETURN m_cursor;
   END dget_list;



   FUNCTION dget_view(in_BankCode IN pass.Branches.BankCode%TYPE,
                      in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t TempAABUsers_PK) index(b Branches_NDX) index(a AABusers_PK) */ a.UserTranID,
                TO_CHAR(t.ApproverTimeStamp,'MM/DD/YYYY HH:MI AM') ApproverTimeStamp,
                a.BRSTN,
                INITCAP(b.BranchName) BranchName,
                INITCAP(a.FirstName) FirstName,
                INITCAP(a.MiddleName) MiddleName,
                INITCAP(a.LastName) LastName,
                INITCAP(a.Title_Position) Title_Position,
                a.UserID,
                REPLACE(a.UserTypeDesc,'-',' ') UserTypeDesc,
                TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdmintimeStamp,
                t.AdminID,
                t.ApproverID,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                INITCAP(RTRIM(t.RecordActions)) RecordActions,
                RTRIM(t.ApproverAction) ApproverAction,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                t.ApproverConfirmID,
                t.AdminConfirmID,
                TO_CHAR(t.UserIDCreatedDate + t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration,
                t.ApproverComment
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
            LEFT JOIN pass.AABusers a ON a.UserTranID = t.UserTranID
         WHERE b.BankCode = in_BankCode
            AND TRIM(t.UserTypeDesc) IN ('Branch-Admin','Branch-Approver','Bank-Officer')
            AND t.UserTranID = in_UserTranID;
      RETURN m_cursor;
   END dget_view;

END p5_m1mn;
/
CREATE OR REPLACE PACKAGE BODY p5_m10bnkadm
AS

   FUNCTION do_resetPass(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                         in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                         in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions = 'EDIT',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE,
         DefaultPassword = in_DefaultPassword,
         USERIDCREATEDDATE = CURRENT_DATE,
         ChangePW = '1',
         ApproverID=in_AdminID,
         ApproverTimeStamp=CURRENT_DATE,
         ApproverAction='APPROVE'
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN, RecordActions, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment, DefaultPassword, USERIDCREATEDDATE, ChangePW, ApproverID, ApproverTimeStamp, ApproverAction )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  'EDIT',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '',
                  in_DefaultPassword,
                  CURRENT_DATE,
                  '1',
                  in_AdminID,
                  CURRENT_DATE,
                  'APPROVE' );
      END IF;
      RETURN 1;
   END do_resetPass;


   FUNCTION get_branches(in_BankCode IN pass.MasterBranches.BankCode%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN

--      insert into PAS5_USERMONITORING (SESSIONID,USERID,REMOTEIP,PASSWORD,MONITORINGDATE) values (in_BankCode,in_BankCode,in_BankCode,in_BankCode,CURRENT_DATE);


      OPEN m_cursor FOR
         SELECT /*+ index(MasterBranches MasterBranches_PK) */ BRSTN,
                BranchName
         FROM pass.MasterBranches
         WHERE bankcode = trim(in_BankCode) AND HEADOFCTAG = '1'
    ORDER BY BRSTN;
      RETURN m_cursor;
   END get_branches;



      FUNCTION bnkadm_getList(in_bcode IN pass.MASTERBRANCHES.BANKCODE%TYPE,
                              o_numrows OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ COUNT(t.UserTranID) INTO o_numrows
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_bcode
            -- (orig) AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
            AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
            AND t.ForDeletion IS NULL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_numrows := 0;
      END;

      IF o_numrows > 0 THEN
         BEGIN
            OPEN m_cursor FOR
                SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ t.UserTranID,
                       t.UserID,
                       t.FirstName,
                       t.LastName,
                       REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                       t.BRSTN,
                       b.BranchName,
                       t.Locked,
                       get_active_status(t.ForDeletion,t.Locked) ActiveUserStatus
                FROM pass.AABUsers t
                   LEFT JOIN pass.Branches b ON b.brstn = t.brstn
                WHERE b.BankCode = in_bcode
                   -- (orig) AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
                   AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
                   AND t.ForDeletion IS NULL
                ORDER BY t.brstn,t.UserID ASC;
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               o_numrows := 0;
         END;
      END IF;
      RETURN m_cursor;
   END bnkadm_getList;


   FUNCTION get_list(in_BankCode IN pass.Branches.BankCode%TYPE,
                     o_numrows OUT NUMBER,
                     io_page IN OUT NUMBER) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      BEGIN
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ COUNT(t.UserTranID) INTO o_numrows
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE b.BankCode = in_BankCode
            -- (orig) AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
            AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
            AND t.ForDeletion IS NULL
         ORDER BY t.brstn, t.UserID ASC;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            o_numrows := 0;
      END;

      IF io_page < 1 THEN
         io_page := 1;
      END IF;

      IF o_numrows > 0 THEN
         BEGIN
            OPEN m_cursor FOR
               SELECT rn,
                      UserTranID,
                      UserID,
                      FirstName,
                      LastName,
                      UserTypeDesc,
                        BRSTN,
                      BranchName,
                      Locked,
                      ActiveUserStatus
               FROM (SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ ROWNUM rn,
                            t.UserTranID,
                            t.UserID,
                            t.FirstName,
                            t.LastName,
                            REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                               t.BRSTN,
                            b.BranchName,
                            t.Locked,
                            get_active_status(t.ForDeletion,t.Locked) ActiveUserStatus
                     FROM pass.AABUsers t
                        LEFT JOIN pass.Branches b ON b.brstn = t.brstn
                     WHERE b.BankCode = in_BankCode
                        -- (orig) AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
                        AND TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
                        AND t.ForDeletion IS NULL
                     ORDER BY t.brstn,t.UserID ASC)
               WHERE rn BETWEEN (io_page * 14 - 14) AND (io_page * 14);
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               o_numrows := 0;
         END;
      END IF;
      RETURN m_cursor;
   END get_list;



   FUNCTION get_viewInfo(in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ t.UserTranID,
                 TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') CreationDate,
                t.BRSTN,
                b.BranchName,
                t.FirstName,
                t.MiddleName,
                t.LastName,
                t.Title_Position,
                t.UserID,
                TRIM(t.UserTypeDesc) UserTypeDesc,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                get_active_status(t.ForDeletion,t.Locked) ActiveUserStatus,
                RTRIM(t.LastRecordAction) RecordActions,
                TO_CHAR(t.UserIDCreatedDate+t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration,
                t.IDExpiration Expiry
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         -- (orig) WHERE TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
         WHERE TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
            AND t.UserTranID = in_UserTranID;
      RETURN m_cursor;
   END get_viewInfo;



   FUNCTION get_InfoForEdit(in_UserTranID IN pass.AABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_NDX) index(b Branches_PK) */ t.UserTranID,
             t.BRSTN,
             b.BranchName,
             NVL(t.FirstName,'') FirstName,
              NVL(t.MiddleName,'') MiddleName,
              NVL(t.LastName,'') LastName,
             NVL(t.Title_Position,'') Title_Position,
             RTRIM(t.UserID) UserID,
              t.UserTypeDesc,
              TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
             NVL(t.IDExpiration,1) IDExpiration
         FROM pass.AABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         -- (orig) WHERE TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver')
         WHERE TRIM(t.UserTypeDesc) IN ('Bank-Admin','Bank-Approver','Host-to-Host') -- (added)
               AND t.UserTranID = in_UserTranID;

      RETURN m_cursor;
   END get_InfoForEdit;



  FUNCTION  do_UpdateUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                          in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                          in_MiddleName IN pass.TempAABusers.MiddleName%TYPE,
                          in_LastName IN pass.TempAABUsers.LastName%TYPE,
                          in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                          in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                          in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                          in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,
                          in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE,
                          in_UserID IN pass.TempAABUsers.UserID%TYPE) RETURN pass.TempAABUsers.UserTranID%TYPE

   AS
      m_cnt NUMBER;
   BEGIN
      m_cnt := 0;
      SELECT /*+ index(TempAABUsers TempAABUsers_PK) */ count(UserTranID) INTO m_cnt FROM pass.TempAABUsers WHERE UserTranID=in_UserTranID;

      IF m_cnt <> 0 THEN
         UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
            FirstName=in_FirstName,
            MiddleName=in_MiddleName,
            LastName=in_LastName,
            Title_Position=in_Title_Position,
            RecordActions='EDIT',
            AdminID=in_AdminID,
            AdminTimeStamp=CURRENT_DATE,
            BRSTN=in_BRSTN,
            UserTypeDesc=in_UserTypeDesc,
            AdminConfirmID=AdminID_sequence.NEXTVAL,
            LastUpdated=CURRENT_DATE,
            IDExpiration=in_IDExpiration,
            UserID=in_UserID,
            ApproverID=in_AdminID,
            ApproverTimeStamp=CURRENT_DATE,
            ApproverAction='APPROVE'
         WHERE UserTranID = in_UserTranID;
      ELSE
         INSERT INTO pass.TempAABUsers ( UserTranID,
                                              FirstName,
                                             MiddleName,
                                             LastName,
                                             Title_Position,
                                             RecordActions,
                                             AdminID,
                                             AdminTimeStamp,
                                             BRSTN,
                                             UserTypeDesc,
                                             AdminConfirmID,
                                             LastUpdated,
                                             IDExpiration,
                                             UserID,
                                         ApproverID,
                                         ApproverTimeStamp,
                                         ApproverAction )
                                 VALUES ( in_UserTranID,
                                           in_FirstName,
                                           in_MiddleName,
                                          in_LastName,
                                           in_Title_Position,
                                          'EDIT',
                                          in_AdminID,
                                          CURRENT_DATE,
                                          in_BRSTN,
                                           in_UserTypeDesc,
                                          AdminID_sequence.NEXTVAL,
                                           CURRENT_DATE,
                                          in_IDExpiration,
                                           in_UserID,
                                           in_AdminID,
                                         CURRENT_DATE,
                                         'APPROVE' );
      END IF;

      IF SQL%NOTFOUND THEN
         RETURN 1;
      ELSE
         RETURN 0;
      END IF;
   END do_UpdateUser;



   FUNCTION get_confirmInfo(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE) RETURN types.ref_cursor
   AS
      m_cursor types.ref_cursor;
   BEGIN
      OPEN m_cursor FOR
         SELECT /*+ index(t AABUsers_PK) index(b Branches_PK) */ t.UserTranID,
                t.BRSTN,
                b.BranchName,
                t.FirstName,
                t.MiddleName,
                t.LastName,
                t.Title_Position,
                t.UserID,
                REPLACE(t.UserTypeDesc,'-',' ') UserTypeDesc,
                TO_CHAR(t.AdminTimeStamp,'MM/DD/YYYY HH:MI AM') AdminTimeStamp,
                t.AdminID,
                TO_CHAR(t.LastUpdated,'MM/DD/YYYY HH:MI AM') LastUpdated,
                RTRIM(t.RecordActions) RecordActions,
                RTRIM(t.ApproverAction) ApproverAction,
                TO_CHAR(t.UserIDCreatedDate,'MM/DD/YYYY HH:MI AM') UserIDCreatedDate,
                t.AdminConfirmID,
                t.ApproverID,
                TO_CHAR(t.UserIDCreatedDate + t.IDExpiration,'MM/DD/YYYY HH:MI AM') IDExpiration
         FROM pass.TempAABUsers t
            LEFT JOIN pass.Branches b ON b.brstn = t.brstn
         WHERE t.UserTranID = in_UserTranID;

         RETURN m_cursor;
   END get_confirmInfo;



   FUNCTION do_AddNewUser(in_FirstName IN pass.TempAABUsers.FirstName%TYPE,
                          in_MiddleName IN pass.TempAABusers.MiddleName%TYPE,
                          in_LastName IN pass.TempAABUsers.LastName%TYPE,
                          in_Title_Position IN pass.TempAABUsers.Title_Position%TYPE,
                          in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE,
                          in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                          in_BRSTN IN pass.TempAABUsers.BRSTN%TYPE,
                          in_UserTypeDesc IN pass.TempAABUsers.UserTypeDesc%TYPE,
                          in_IDExpiration IN pass.TempAABUsers.IDExpiration%TYPE,
                             in_UserIDstr IN pass.TempAABUsers.UserID%TYPE) RETURN pass.TempAABUsers.UserTranID%TYPE
   AS
      m_UserTranID pass.TempAABUsers.UserTranID%TYPE;
   BEGIN
      INSERT INTO pass.TempAABUsers
                  (FirstName,
                   MiddleName,
                   LastName,
                 Title_Position,
                    DefaultPassword,
                   UserIDCreatedDate,
                 RecordActions,
                   AdminID,
                   AdminTimeStamp,
                   BRSTN,
                 UserTypeDesc,
                   AdminConfirmID,
                   UserTranID, -- (added)
                   LastUpdated,
                   IDExpiration,
                   UserID )
         VALUES (in_FirstName,
                  in_MiddleName,
                  in_LastName,
                  in_Title_Position,
                  in_DefaultPassword,
                  CURRENT_DATE,
                'ADD',
                  in_AdminID,
                  CURRENT_DATE,
                  in_BRSTN,
                in_UserTypeDesc,
                  AdminID_sequence.NEXTVAL,
                  UserTranID_sequence.NEXTVAL, -- (added)
                  CURRENT_DATE,
                  in_IDExpiration,
                  in_UserIDstr )
          RETURNING UserTranID INTO m_UserTranID;
         commit;

         UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
            RecordActions='ADD',
            ApproverID=in_AdminID,
            ApproverTimeStamp=CURRENT_DATE,
            ApproverAction='APPROVE'
         WHERE UserTranID = m_UserTranID;


      -- INSERT INTO UserIDLog (UserIDLogID,UserID)
      --   (SELECT UserTranID,UserID
      --    FROM TempAABUsers
      --    WHERE UserID = in_UserID);

      RETURN m_UserTranID;
   END do_addNewUser;


   FUNCTION do_findBRSTN(in_BRSTN IN pass.MasterBranches.BRSTN%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
   BEGIN

      m_found := 0;

      SELECT /*+ index(MasterBranches MasterBranches_PK) */ COUNT(BRSTN) INTO m_found FROM pass.MasterBranches
      WHERE BRSTN = in_BRSTN;

      RETURN m_found;

   END do_findBRSTN;



   FUNCTION do_removeUser(in_USERTRANID IN pass.AABUsers.UserTranID%TYPE,
                          in_AdminID IN pass.TempAABUsers.AdminID%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_usertypedesc pass.AABUsers.UserTypeDesc%TYPE;

   BEGIN
      m_found := 0;
      SELECT /*+ index(AABUsers AABUsers_PK) */ count(UserTRANID) INTO m_found FROM pass.AABUsers
            WHERE UserTRANID = in_USERTRANID;

      IF m_found > 0 THEN
         UPDATE /*+ index(AABUsers AABUsers_PK) */ pass.AABUsers SET
            LastRecordAction = 'DELETE',
            ForDeletion = '1',
            LastUpdated = CURRENT_DATE
         WHERE UserTRANID = in_USERTRANID;
      END IF;
      RETURN m_found;
   END do_removeUser;



   FUNCTION do_lockUser(in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                        in_AdminID IN pass.TempAABUsers.AdminID%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
      m_lock pass.AABUsers.Locked%TYPE;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;

   BEGIN
      m_found := 0;
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, Locked, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_lock, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */  pass.TempAABUsers SET
         RecordActions = CASE WHEN m_lock = '1' THEN 'UNLOCK'
                                                 ELSE 'LOCK'
                         END,
         Locked = CASE WHEN m_lock = '1' THEN ''
                                          ELSE '1'
                  END,
         ApproverAction = '',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN,    RecordActions, Locked, ApproverAction, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  CASE WHEN m_lock = '1' THEN 'UNLOCK'
                                          ELSE 'LOCK'
                  END,
                  CASE WHEN m_lock = '1' THEN ''
                                          ELSE '1'
                  END,
                  '',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '' );
      END IF;
      commit;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
             ApproverAction='APPROVE',
             ApproverTimeStamp = CURRENT_DATE,
             ApproverConfirmID = ApproverID_sequence.NEXTVAL,
             ApproverID = in_AdminID,
             LastUpdated = CURRENT_DATE
      WHERE UserTranID = in_UserTranID;

      RETURN 0;
   END do_lockUser;



   FUNCTION do_changePass (in_UserTranID IN pass.TempAABUsers.UserTranID%TYPE,
                           in_AdminID IN pass.TempAABUsers.AdminID%TYPE,
                           in_DefaultPassword IN pass.TempAABUsers.DefaultPassword%TYPE) RETURN NUMBER
   AS
      m_found NUMBER;
      m_cursor types.ref_cursor;
      m_lastname pass.AABUsers.LastName%TYPE;
      m_BRSTN pass.AABUsers.BRSTN%TYPE;
      m_userid pass.AABUsers.UserID%TYPE;
      m_userrole pass.AABUsers.UserTypeDesc%TYPE;
   BEGIN
      OPEN m_cursor FOR
          SELECT /*+ index(AABUsers AABUsers_PK) */ UserID, LastName, BRSTN, UserTypeDesc FROM pass.AABUsers
            WHERE UserTranID = in_UserTranID;
      IF m_cursor%ISOPEN THEN
         FETCH m_cursor INTO m_userid, m_lastname, m_BRSTN, m_userrole;
         CLOSE m_cursor;
      END IF;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
         RecordActions = 'EDIT',
         ApproverAction = '',
         ApproverComment = '',
         UserID = m_userid,
         BRSTN = m_BRSTN,
         AdminID = in_AdminID,
         UserTypeDesc = m_userrole,
         LastUpdated = CURRENT_DATE,
         AdminTimeStamp = CURRENT_DATE,
         DefaultPassword = in_DefaultPassword,
         ChangePW = '1'
      WHERE UserTranID = in_UserTranID;

      IF SQL%NOTFOUND THEN
         INSERT INTO pass.TempAABUsers
            ( UserTranID, UserID, LastName, BRSTN, RecordActions, ApproverAction, AdminID, UserTypeDesc, LastUpdated, AdminTimeStamp, ApproverComment, DefaultPassword, ChangePW )
         VALUES ( in_UserTranID,
                  m_userid,
                  m_lastname,
                  m_BRSTN,
                  'EDIT',
                  '',
                  in_AdminID,
                  m_userrole,
                  CURRENT_DATE,
                  CURRENT_DATE,
                  '',
                  in_DefaultPassword,
                  '1' );
      END IF;
      commit;

      UPDATE /*+ index(TempAABUsers TempAABUsers_PK) */ pass.TempAABUsers SET
             ApproverAction='APPROVE',
             ApproverTimeStamp = CURRENT_DATE,
             ApproverConfirmID = ApproverID_sequence.NEXTVAL,
             ApproverID = in_AdminID,
             LastUpdated = CURRENT_DATE
      WHERE UserTranID = in_UserTranID;

      RETURN 1;
   END do_changePass;

-- (added) start
   FUNCTION
      do_checkUserID(in_Role  IN varchar2,
                     in_BRSTN IN varchar2) RETURN VARCHAR2
   AS
      m_roleCode varchar2(2);
      m_userCount NUMBER;
      m_CountStr varchar2(36);
      m_FreeID varchar2(2);
      m_cnt NUMBER;

   BEGIN
      m_userCount := 0;
      m_cnt := 0;
      m_FreeID := '';
      m_CountStr := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      m_roleCode := pass.p5_m1mn.get_roleCode(in_Role);

      IF trim(m_roleCode) = '-1' THEN
         RETURN '-1';
      ELSE
           SELECT /*+ index(AABUsers AABUsers_NDX) */ count(UserID) into m_userCount
                FROM pass.AABUsers WHERE ForDeletion IS NULL
                AND SUBSTR(UserID,3,1) = m_roleCode and BRSTN = in_BRSTN;

         IF m_userCount < 36 THEN
            FOR i IN 1 .. 36
                LOOP
                m_FreeID := m_roleCode || substr(m_CountStr,i,1);
                SELECT /*+ index(AABUsers AABUsers_NDX) */ count(UserID) into m_cnt
                   FROM pass.AABUsers WHERE ForDeletion IS NULL
                   AND SUBSTR(UserID,3,2) = m_FreeID and BRSTN = in_BRSTN;
                  IF m_cnt = 0 THEN
                     EXIT;
                   END IF;
             END LOOP;
                RETURN 'PA' || m_FreeID || substr(in_BRSTN,1,8);
          ELSE
             RETURN '0';
          END IF;
      END IF;

   END do_CheckUserID;
-- (added) end

END p5_m10bnkadm;
/
/* June 29, 2013 - host-to-host */
CREATE OR REPLACE PACKAGE p5_vaam
AS

   FUNCTION AM_ListActivityHistory(in_HistoryDate IN VARCHAR2,o_numrows OUT NUMBER,io_page IN OUT NUMBER) RETURN types.ref_cursor;


   PROCEDURE
       AM_InsertXMLQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                        in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                        in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                        in_MessageType IN ActivityMonitor.MessageType%TYPE,
                        in_Key IN ActivityMonitor.Key%TYPE,
                        in_XMLFileID IN ActivityMonitor.XMLFileID%TYPE,
                        in_HashValue IN ActivityMonitor.XMLHashValue%TYPE);
   -- (added) start

   FUNCTION Get_TIME_DURATION(in_FROM IN DATE,in_UNTIL IN DATE) RETURN VARCHAR2;

   FUNCTION Get_H2H_SERVERS_TASK_DATES RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_TASK_List(in_DATE IN VARCHAR2) RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_TASK_LOG(in_TASK_ID IN H2H_SERVERS_TASK.TASK_ID%TYPE) RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_SESSION_DATES(in_ORIGIN IN H2H_SERVERS_SESSION.ORIGIN%TYPE) RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_SESSION_List(in_ORIGIN IN H2H_SERVERS_SESSION.ORIGIN%TYPE,in_DATE IN VARCHAR2)
            RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_SESSION_LOG(in_SESSION_ID IN H2H_SERVERS_SESSION.SESSION_ID%TYPE) RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_ALERT_DATES RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_ALERT_List(in_DATE IN VARCHAR2) RETURN types.ref_cursor;

   FUNCTION Get_H2H_SERVERS_ALERT_LOG(in_ALERT_ID IN H2H_SERVERS_ALERT.ALERT_ID%TYPE) RETURN types.ref_cursor;

   FUNCTION Get_XMLManager_Incoming RETURN types.ref_cursor;

   PROCEDURE
       Remove_XMLManager_Incoming(in_TRANTYPE IN pass.XMLManager_Incoming.TRANTYPE%TYPE,
                                  in_TranID IN pass.XMLManager_Incoming.TRANID%TYPE);

   PROCEDURE
       Add_XMLMANAGER_FILE(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                           in_TranID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                           in_BANK_CODE IN pass.XMLMANAGER_FILE.BANK_CODE%TYPE,
                           in_FILENAME IN pass.XMLMANAGER_FILE.FILENAME%TYPE,
                           in_FILEDATE IN pass.XMLMANAGER_FILE.FILEDATE%TYPE,
                           in_XMLHASHVALUE IN pass.XMLMANAGER_FILE.XMLHASHVALUE%TYPE,
                           in_GZIPXMLFILE IN pass.XMLMANAGER_FILE.GZIPXMLFILE%TYPE);

   FUNCTION Get_H2H_PCHC_HOST RETURN types.ref_cursor;

   PROCEDURE
       Update_H2H_PCHC_HOST(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                            in_HOST_NAME IN H2H_PCHC_HOST.HOST_NAME%TYPE,
                            in_HOST_IP IN H2H_PCHC_HOST.HOST_IP%TYPE,
                            in_HOST_PORT IN H2H_PCHC_HOST.HOST_PORT%TYPE,
                            in_HOST_MAC IN H2H_PCHC_HOST.HOST_MAC%TYPE,
                            in_HOST_STATUS IN H2H_PCHC_HOST.HOST_STATUS%TYPE,
                            in_HOST2_NAME IN H2H_PCHC_HOST.HOST2_NAME%TYPE,
                            in_HOST2_IP IN H2H_PCHC_HOST.HOST2_IP%TYPE,
                            in_HOST2_PORT IN H2H_PCHC_HOST.HOST2_PORT%TYPE,
                            in_HOST2_MAC IN H2H_PCHC_HOST.HOST2_MAC%TYPE,
                            in_HOST2_STATUS IN H2H_PCHC_HOST.HOST2_STATUS%TYPE);

   FUNCTION Get_Email_Setting RETURN types.ref_cursor;

   PROCEDURE
       Update_Email_Setting(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                            in_SENDER_EMAIL IN EMAIL_SETTING.SENDER_EMAIL%TYPE,
                            in_CC_EMAIL IN EMAIL_SETTING.CC_EMAIL%TYPE,
                            in_BCC_EMAIL IN EMAIL_SETTING.BCC_EMAIL%TYPE,
                            in_SMTP_HOST IN EMAIL_SETTING.SMTP_HOST%TYPE,
                            in_SMTP_PORT IN EMAIL_SETTING.SMTP_PORT%TYPE,
                            in_SMTP_TYPE IN EMAIL_SETTING.SMTP_TYPE%TYPE,
                            in_NEED_AUTH IN EMAIL_SETTING.NEED_AUTH%TYPE,
                            in_USERNAME IN EMAIL_SETTING.USERNAME%TYPE,
                            in_PASSWORD IN EMAIL_SETTING.PASSWORD%TYPE,
                            in_MOBILE IN EMAIL_SETTING.MOBILE%TYPE,
                            in_SMS_GW1 IN EMAIL_SETTING.SMS_GW1%TYPE,
                            in_SMS_GW2 IN EMAIL_SETTING.SMS_GW2%TYPE,
                            in_SMS_GW3 IN EMAIL_SETTING.SMS_GW3%TYPE,
                            in_SMS_GW4 IN EMAIL_SETTING.SMS_GW4%TYPE);

   FUNCTION Get_xmlManager_Limits RETURN types.ref_cursor;
   
   PROCEDURE
       Update_XMLManager_Limit(in_Limit_Name IN XMLmanager_Limit.Limit_Name%TYPE,
                             in_Limit_Value IN XMLmanager_Limit.Limit_Value%TYPE);

   FUNCTION Get_XMLManager_BOC_Status_Log RETURN types.ref_cursor;

   FUNCTION Get_xmlManager_Sent(o_numrows OUT NUMBER) RETURN types.ref_cursor;
   
   PROCEDURE Update_ActivityMonitor4Resend(in_RefTranID IN ActivityMonitor.RefTranID%TYPE);

   PROCEDURE
       AM_InsertXMLQueDB (in_RefTranID IN XMLmanager.RefTranID%TYPE,
                        in_CustomsClientNumber IN XMLmanager.CustomsClientNumber%TYPE,
                        in_AABRefNo IN XMLmanager.AABRefNo%TYPE,
                        in_MessageType IN XMLmanager.MessageType%TYPE,
                        in_Key IN XMLmanager.Key%TYPE,
                        in_XMLFileID IN XMLmanager.XMLFileID%TYPE,
                        in_HashValue IN XMLmanager.XMLHashValue%TYPE,
                        in_GZIPXMLFile IN XMLmanager.GZIPXMLFile%TYPE,
                        in_XMLTimeStamp IN XMLmanager.XMLTimeStamp%TYPE
                        );
   FUNCTION
       Get_XMLManager_Que(o_numfound OUT NUMBER) RETURN types.ref_cursor;

   PROCEDURE
       Update_XMLManager_Que(in_RefTranId  IN XMLmanager.RefTranID%TYPE,
                             in_CustomsClientNumber IN XMLmanager.CustomsClientNumber%TYPE,
                             in_AABRefNo IN XMLmanager.AABRefNo%TYPE,
                             in_XMLFileID IN XMLmanager.XMLFileID%TYPE,
                             in_MessageType IN XMLmanager.MessageType%TYPE,
                             out_RowCount OUT NUMBER);
   FUNCTION
       Get_VASPD_Admin_Status RETURN types.ref_cursor;

   PROCEDURE Update_VASPD_Admin_Status(in_VASPD_STATUS IN VASPD_Admin.VASPD_STATUS%TYPE,
                                       in_LEASED_LINE_STATUS IN VASPD_Admin.LEASED_LINE_STATUS%TYPE,
                                       in_INTERNET_STATUS IN VASPD_Admin.LEASED_LINE_STATUS%TYPE,
                                       in_CURRENT_CONNECTION IN VASPD_Admin.CURRENT_CONNECTION%TYPE);

   PROCEDURE Update_VASPD_Admin_Request(in_CHANGE_CONNECTION IN VARCHAR2,
                                       in_CHANGE_STATUS IN VARCHAR2);

   -- (added) end

   FUNCTION
       AM_GetXMLFromQue(o_numfound OUT NUMBER) RETURN types.ref_cursor;

   FUNCTION
       AM_RemoveFromQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                         in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                         in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                         in_BOCConfirmID IN VARCHAR2) RETURN NUMBER;
   FUNCTION
       AM_RemoveErrorQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                          in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                          in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                          in_BOCConfirmID IN VARCHAR2,
                          in_ErrorMessage IN VARCHAR2) RETURN NUMBER;

   PROCEDURE AM_UpdateXMLQue(in_RefTranID IN ActivityMonitor.RefTranID%TYPE);

   PROCEDURE AM_StampError(in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                           in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                           in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                           in_MessageType IN ActivityMonitor.MessageType%TYPE);

   PROCEDURE
       AM_StampCPISentDate(in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                           in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                           in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                           in_MessageType IN ActivityMonitor.MessageType%TYPE);

   PROCEDURE
       AM_WriteCPILog(in_Number IN CPI_Logs.Id_Number%TYPE,
                      in_Type IN CPI_Logs.Type%TYPE,
                      in_AABRefNo IN CPI_Logs.AABRefNo%TYPE,
                      in_Status IN CPI_Logs.Status%TYPE,
                      in_ErrorData IN CPI_Logs.SourceField%TYPE,
                      in_ErrorMessage IN CPI_Logs.ErrorDesc%TYPE,
                      in_ErrorCode IN CPI_Logs.ErrorNum%TYPE);

--    PROCEDURE
--        AM_SetCPISentTimestamp(in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
END p5_vaam;
/
CREATE OR REPLACE PACKAGE BODY p5_vaam
AS

FUNCTION AM_ListActivityHistory(in_HistoryDate IN VARCHAR2,o_numrows OUT NUMBER,io_page IN OUT NUMBER) RETURN types.ref_cursor
AS
   m_cursor types.ref_cursor;
BEGIN
  IF io_page < 1 THEN
       io_page := 1;
  END IF;

  IF in_HistoryDate IS NULL or in_HistoryDate = '' THEN
       BEGIN
            SELECT /*+ index(ActivityMonitorHistory ActivityMonitorHistory_NDX) */ COUNT(RefTranID) INTO o_numrows
            FROM pass.ActivityMonitorHistory;
       EXCEPTION
            WHEN NO_DATA_FOUND THEN
                o_numrows := 0;
       END;
        IF o_numrows > 0 THEN
             IF io_page > o_numrows THEN
                io_page := o_numrows;
             END IF;
           BEGIN
                OPEN m_cursor FOR
                   SELECT rn,RefTranID,CustomsClientNumber,AABRefNo,ImportEntryDecNo,
                          BAPConfirmDate,PCHCSentDate,CPIConfirmDate,
                          BOCConfirmDate,BOCConfirmStat,MessageType
                   FROM (
                       SELECT /*+ index(ActivityMonitorHistory ActivityMonitorHistory_ndx) */ ROWNUM rn,RefTranID,CustomsClientNumber,AABRefNo,ImportEntryDecNo,
                              BAPConfirmDate,PCHCSentDate,CPIConfirmDate,
                              BOCConfirmDate,BOCConfirmStat,MessageType
                       FROM pass.ActivityMonitorHistory
                       ORDER BY BOCConfirmDate DESC)
                   WHERE rn BETWEEN (io_page * 14 - 14) AND (io_page * 14);
           EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    o_numrows := 0;
           END;
       END IF;
  ELSE
     BEGIN
            SELECT /*+ index(ActivityMonitorHistory ActivityMonitorHistory_ndx) */ COUNT(RefTranID) INTO o_numrows
            FROM pass.ActivityMonitorHistory
            WHERE TO_CHAR(BOCConfirmDate,'YYYY-MON-DD') = TO_CHAR(in_HistoryDate,'YYYY-MON-DD')
            ORDER BY BOCConfirmDate;
     EXCEPTION
            WHEN NO_DATA_FOUND THEN
                o_numrows := 0;
     END;

     IF o_numrows > 0 THEN
          IF io_page > o_numrows THEN
             io_page := o_numrows;
          END IF;
        BEGIN
                OPEN m_cursor FOR
                   SELECT rn,RefTranID,CustomsClientNumber,AABRefNo,ImportEntryDecNo,
                          BAPConfirmDate,PCHCSentDate,CPIConfirmDate,
                          BOCConfirmDate,BOCConfirmStat,MessageType
                   FROM (
                          SELECT /*+ index(ActivityMonitorHistory ActivityMonitorHistory_ndx) */ ROWNUM rn,RefTranID,CustomsClientNumber,AABRefNo,ImportEntryDecNo,
                                 BAPConfirmDate,PCHCSentDate,CPIConfirmDate,BOCConfirmDate,BOCConfirmStat,MessageType
                          FROM pass.ActivityMonitorHistory
                          WHERE TO_CHAR(BOCConfirmDate,'YYYY-MON-DD') = TO_CHAR(in_HistoryDate,'YYYY-MON-DD')
                          ORDER BY BOCConfirmDate DESC)
                   WHERE rn BETWEEN (io_page * 14 - 14) AND (io_page * 14);
        EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    o_numrows := 0;
        END;
     END IF;
  END IF;
  RETURN m_cursor;
END AM_ListActivityHistory;


   PROCEDURE
       AM_InsertXMLQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                        in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                        in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                        in_MessageType IN ActivityMonitor.MessageType%TYPE,
                        in_Key IN ActivityMonitor.Key%TYPE,
                        in_XMLFileID IN ActivityMonitor.XMLFileID%TYPE,
                        in_HashValue IN ActivityMonitor.XMLHashValue%TYPE)
   AS
      xCount NUMBER;
   BEGIN
      SELECT /*+ index(ActivityMonitor ActivityMonitor_NDX) */ count(RefTranID) INTO xCount
         FROM ActivityMonitor WHERE RefTranID = in_RefTranID
                          AND  CustomsClientNumber = in_CustomsClientNumber
                AND  AABRefNo = in_AABRefNo
                AND  XMLFileID = in_XMLFileID
                AND  MessageType = in_MessageType;
       IF xCount = 0 THEN
          INSERT INTO ActivityMonitor
             (RefTranID,CustomsClientNumber,AABRefNo,XMLFileID,BAPConfirmDate,MessageType,Key)
          VALUES(in_RefTranID,in_CustomsClientNumber,in_AABRefNo,in_XMLFileID,CURRENT_DATE,in_MessageType,in_Key);
       END IF;
   END AM_InsertXMLQue;

   -- (added) start
   FUNCTION Get_TIME_DURATION(in_FROM IN DATE,in_UNTIL IN DATE) RETURN VARCHAR2
   IS
   m_SECOND NUMBER;
   BEGIN
      IF in_FROM IS NULL OR in_UNTIL IS NULL THEN
         RETURN 'Unknown';
      ELSE
         m_SECOND:=(in_UNTIL-in_FROM)*86400;
         IF m_SECOND<0 THEN
            m_SECOND:=(in_FROM-in_UNTIL)*86400;
         END IF;
         IF m_SECOND>60 THEN
            RETURN TO_CHAR((m_SECOND/60),'fm9999.99')||' min.';
         ELSE
            RETURN TO_CHAR(m_SECOND,'fm99.99')||' sec.';
         END IF;
      END IF;
   END Get_TIME_DURATION;

   FUNCTION Get_H2H_SERVERS_TASK_DATES RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_TASK H2H_SERVERS_TASK_NDX3) */ TO_CHAR(TRUNC(START_TIME),'MM/DD/YYYY') ADATE
                FROM H2H_SERVERS_TASK GROUP BY TRUNC(START_TIME) ORDER BY TRUNC(START_TIME) DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_TASK_DATES;

   FUNCTION Get_H2H_SERVERS_TASK_List(in_DATE IN VARCHAR2) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(A H2H_SERVERS_TASK_NDX3) INDEX(B BANKLIST_PK) */ A.TASK_ID,
                TO_CHAR(A.START_TIME,'HH24:MI:SS') ATIME,A.TASK,B.BANKNAME,A.SERVER_TYPE,A.ATTEMPTS,A.STATUS
                FROM H2H_SERVERS_TASK A,BANKLIST B WHERE B.BANKCODE=A.BANK_CODE
                AND TO_CHAR(A.START_TIME,'MM/DD/YYYY')=in_DATE ORDER BY a.START_TIME DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_TASK_List;

   FUNCTION Get_H2H_SERVERS_TASK_LOG(in_TASK_ID IN H2H_SERVERS_TASK.TASK_ID%TYPE) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_TASK_LOG H2H_SERVERS_TASK_LOG_NDX) */ TO_CHAR(LOG_DATE,'MM/DD/YYYY HH24:MI:SS') LOGDATE,
                LOG_TYPE,ATTEMPTS,LOG_TEXT,SESSION_ID
                FROM H2H_SERVERS_TASK_LOG WHERE TASK_ID=in_TASK_ID ORDER BY LOG_DATE;
       RETURN m_cursor;
   END Get_H2H_SERVERS_TASK_LOG;

   FUNCTION Get_H2H_SERVERS_SESSION_DATES(in_ORIGIN IN H2H_SERVERS_SESSION.ORIGIN%TYPE) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_SESSION H2H_SERVERS_SESSION_NDX) */ TO_CHAR(TRUNC(START_TIME),'MM/DD/YYYY') ADATE
                FROM H2H_SERVERS_SESSION WHERE ORIGIN=in_ORIGIN GROUP BY TRUNC(START_TIME) ORDER BY TRUNC(START_TIME) DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_SESSION_DATES;

   FUNCTION Get_H2H_SERVERS_SESSION_List(in_ORIGIN IN H2H_SERVERS_SESSION.ORIGIN%TYPE,in_DATE IN VARCHAR2)
            RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(A H2H_SERVERS_SESSION_NDX) INDEX(B BANKLIST_PK) */ A.SESSION_ID,
                TO_CHAR(A.START_TIME,'HH24:MI:SS') ATIME,A.BANK_CODE,B.BANKNAME,A.IP_ADDR,A.PORT,
                Get_TIME_DURATION(A.START_TIME,A.END_TIME) DURATION,A.STATUS
                FROM H2H_SERVERS_SESSION A,BANKLIST B
                WHERE A.ORIGIN=in_ORIGIN AND B.BANKCODE=A.BANK_CODE AND TO_CHAR(A.START_TIME,'MM/DD/YYYY')=in_DATE ORDER BY A.START_TIME DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_SESSION_List;

   FUNCTION Get_H2H_SERVERS_SESSION_LOG(in_SESSION_ID IN H2H_SERVERS_SESSION.SESSION_ID%TYPE) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_SESSION_LOG H2H_SERVERS_SESSION_LOG_NDX) */ TO_CHAR(LOG_DATE,'MM/DD/YYYY HH24:MI:SS') LOGDATE,LOG_TYPE,LOG_TEXT
                FROM H2H_SERVERS_SESSION_LOG WHERE SESSION_ID=in_SESSION_ID ORDER BY LOG_DATE;
       RETURN m_cursor;
   END Get_H2H_SERVERS_SESSION_LOG;

   FUNCTION Get_H2H_SERVERS_ALERT_DATES RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_NDX2) */ TO_CHAR(TRUNC(ALERT_DATE),'MM/DD/YYYY') ADATE
                FROM H2H_SERVERS_ALERT GROUP BY TRUNC(ALERT_DATE) ORDER BY TRUNC(ALERT_DATE) DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_ALERT_DATES;

   FUNCTION Get_H2H_SERVERS_ALERT_List(in_DATE IN VARCHAR2) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_ALERT H2H_SERVERS_ALERT_NDX2) */ ALERT_ID,
                TO_CHAR(ALERT_DATE,'HH24:MI:SS') ATIME,ALERT_TO,SUBJECT,ALERT,ALERT_TYPE,ATTEMPTS,STATUS
                FROM H2H_SERVERS_ALERT WHERE TO_CHAR(ALERT_DATE,'MM/DD/YYYY')=in_DATE ORDER BY ALERT_DATE DESC;
       RETURN m_cursor;
   END Get_H2H_SERVERS_ALERT_List;

   FUNCTION Get_H2H_SERVERS_ALERT_LOG(in_ALERT_ID IN H2H_SERVERS_ALERT.ALERT_ID%TYPE) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(H2H_SERVERS_ALERT_LOG H2H_SERVERS_ALERT_LOG_NDX) */ TO_CHAR(LOG_DATE,'MM/DD/YYYY HH24:MI:SS') LOGDATE,LOG_TEXT
                FROM H2H_SERVERS_ALERT_LOG WHERE ALERT_ID=in_ALERT_ID ORDER BY LOG_DATE;
       RETURN m_cursor;
   END Get_H2H_SERVERS_ALERT_LOG;

   FUNCTION Get_XMLManager_Incoming RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
         SELECT /*+ INDEX(XMLMANAGER_INCOMING XMLMANAGER_INCOMING_NDX) */
                TRANTYPE,TRANID,BANK_CODE,FILENAME,TO_CHAR(DATE_CREATED,'YYYYMM') FOLDER
                FROM XMLMANAGER_INCOMING ORDER BY DATE_CREATED;
       RETURN m_cursor;
   END Get_XMLManager_Incoming;

   PROCEDURE
       Remove_XMLManager_Incoming(in_TRANTYPE IN pass.XMLManager_Incoming.TRANTYPE%TYPE,
                                  in_TranID IN pass.XMLManager_Incoming.TRANID%TYPE)
   AS
   BEGIN
      DELETE /*+ INDEX(XMLMANAGER_INCOMING XMLMANAGER_INCOMING_PK) */ XMLMANAGER_INCOMING
             WHERE TRANTYPE=in_TRANTYPE AND TRANID=in_TranID;
   END Remove_XMLManager_Incoming;

   PROCEDURE
       Add_XMLMANAGER_FILE(in_TRANTYPE IN pass.XMLMANAGER_FILE.TRANTYPE%TYPE,
                           in_TranID IN pass.XMLMANAGER_FILE.TRANID%TYPE,
                           in_BANK_CODE IN pass.XMLMANAGER_FILE.BANK_CODE%TYPE,
                           in_FILENAME IN pass.XMLMANAGER_FILE.FILENAME%TYPE,
                           in_FILEDATE IN pass.XMLMANAGER_FILE.FILEDATE%TYPE,
                           in_XMLHASHVALUE IN pass.XMLMANAGER_FILE.XMLHASHVALUE%TYPE,
                           in_GZIPXMLFILE IN pass.XMLMANAGER_FILE.GZIPXMLFILE%TYPE)
   AS
   BEGIN
      INSERT INTO XMLMANAGER_FILE(TRANTYPE,TRANID,BANK_CODE,FILENAME,FILEDATE,XMLHASHVALUE,GZIPXMLFILE)
             VALUES(in_TRANTYPE,in_TRANID,in_BANK_CODE,in_FILENAME,in_FILEDATE,in_XMLHASHVALUE,in_GZIPXMLFILE);
   END Add_XMLMANAGER_FILE;

   FUNCTION Get_H2H_PCHC_HOST RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
          SELECT /*+ index(H2H_PCHC_HOST H2H_PCHC_HOST_PK) */ HOST_NAME,HOST_IP,
                 HOST_PORT,HOST_MAC,HOST_STATUS,HOST2_NAME,HOST2_IP,HOST2_PORT,HOST2_MAC,HOST2_STATUS
          FROM pass.H2H_PCHC_HOST
          WHERE ROWNUM<2;
       RETURN m_cursor;
   END Get_H2H_PCHC_HOST;

   PROCEDURE
       Update_H2H_PCHC_HOST(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                            in_HOST_NAME IN H2H_PCHC_HOST.HOST_NAME%TYPE,
                            in_HOST_IP IN H2H_PCHC_HOST.HOST_IP%TYPE,
                            in_HOST_PORT IN H2H_PCHC_HOST.HOST_PORT%TYPE,
                            in_HOST_MAC IN H2H_PCHC_HOST.HOST_MAC%TYPE,
                            in_HOST_STATUS IN H2H_PCHC_HOST.HOST_STATUS%TYPE,
                            in_HOST2_NAME IN H2H_PCHC_HOST.HOST2_NAME%TYPE,
                            in_HOST2_IP IN H2H_PCHC_HOST.HOST2_IP%TYPE,
                            in_HOST2_PORT IN H2H_PCHC_HOST.HOST2_PORT%TYPE,
                            in_HOST2_MAC IN H2H_PCHC_HOST.HOST2_MAC%TYPE,
                            in_HOST2_STATUS IN H2H_PCHC_HOST.HOST2_STATUS%TYPE)
   AS
   m_UserID pass.AABUsers.UserID%TYPE;
   m_UserTypeGrp pass.AABUserType.UserTypeGrp%TYPE;
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   BEGIN
      BEGIN
         SELECT /*+ INDEX(A AABUSERS_PK) INDEX(B AABUSERTYPE_PK) */ A.USERID,B.USERTYPEGRP INTO m_UserID,m_UserTypeGrp
                FROM AABUSERS A,AABUSERTYPE B WHERE B.USERTYPEDESC=A.USERTYPEDESC AND A.USERTRANID=in_UserTranID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         m_UserID:='Unknown';
         m_UserTypeGrp:='PCHC';
      END;
      BEGIN
          SELECT /*+ index(SENDER_EMAIL SENDER_EMAIL_PK) */ HOST_NAME ||'^'|| HOST_IP ||'^'|| TO_CHAR(HOST_PORT) ||'^'|| HOST_MAC ||'^'|| HOST_STATUS ||'^'||
                 NVL(HOST2_NAME,' ') ||'^'|| NVL(HOST2_IP,' ') ||'^'|| NVL(TO_CHAR(HOST2_PORT),' ') ||'^'|| NVL(HOST2_MAC, ' ') ||'^'|| NVL(HOST2_STATUS, ' ')
                 INTO v_OldFields
          FROM pass.H2H_PCHC_HOST
          WHERE ROWNUM<2;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         v_OldFields:=NULL;
      END;
      v_NewFields:=in_HOST_NAME ||'^'|| in_HOST_IP ||'^'|| TO_CHAR(in_HOST_PORT) ||'^'|| in_HOST_STATUS ||'^'|| in_HOST_MAC ||'^'||
                   NVL(in_HOST2_NAME,' ') ||'^'|| NVL(in_HOST2_IP,' ') ||'^'|| NVL(TO_CHAR(in_HOST2_PORT),' ') ||'^'|| NVL(in_HOST2_MAC, ' ') ||'^'|| NVL(in_HOST2_STATUS, ' ');
      IF v_NewFields<>NVL(v_OldFields,' ') THEN
         BEGIN
            IF v_OldFields IS NULL THEN
               INSERT INTO H2H_PCHC_HOST(HOST_NAME,HOST_IP,HOST_PORT,HOST_MAC,HOST_STATUS,HOST2_NAME,HOST2_IP,HOST2_PORT,HOST2_MAC,HOST2_STATUS)
                      VALUES(in_HOST_NAME,in_HOST_IP,in_HOST_PORT,in_HOST_MAC,in_HOST_STATUS,in_HOST2_NAME,in_HOST2_IP,in_HOST2_PORT,in_HOST2_MAC,in_HOST2_STATUS);
            ELSE
               UPDATE /*+ index(H2H_PCHC_HOST H2H_PCHC_HOST_PK) */ H2H_PCHC_HOST SET HOST_NAME=in_HOST_NAME,
                      HOST_IP=in_HOST_IP,HOST_PORT=in_HOST_PORT,HOST_MAC=in_HOST_MAC,HOST_STATUS=in_HOST_STATUS,
                      HOST2_NAME=in_HOST2_NAME,HOST2_IP=in_HOST2_IP,HOST2_PORT=in_HOST2_PORT,HOST2_MAC=in_HOST2_MAC,
                      HOST2_STATUS=in_HOST2_STATUS WHERE ROWNUM<2;
            END IF;
         EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            UPDATE /*+ index(H2H_PCHC_HOST H2H_PCHC_HOST_PK) */ H2H_PCHC_HOST SET
                   HOST_IP=in_HOST_IP,HOST_PORT=in_HOST_PORT,HOST_MAC=in_HOST_MAC,HOST_STATUS=in_HOST_STATUS,HOST2_NAME=in_HOST2_NAME,
                   HOST2_IP=in_HOST2_IP,HOST2_PORT=in_HOST2_PORT,HOST2_MAC=in_HOST2_MAC,HOST2_STATUS=in_HOST2_STATUS
                   WHERE HOST_NAME=in_HOST_NAME;
         END;
         IF v_OldFields IS NULL THEN
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','ADD','PCHC HOST SETTING CREATED',SYSDATE,'',v_OldFields,v_NewFields);
         ELSE
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','EDIT','PCHC HOST SETTING UPDATED',SYSDATE,'',v_OldFields,v_NewFields);
         END IF;
         IF in_HOST_STATUS='Y' OR in_HOST2_STATUS='Y' THEN
            -- Broadcast new settings
            p5_mh2h.ALL_H2H_SERVERS_TASK('C');
         END IF;
      END IF;
   END Update_H2H_PCHC_HOST;

   FUNCTION Get_Email_Setting RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
          SELECT /*+ index(SENDER_EMAIL SENDER_EMAIL_PK) */ SENDER_EMAIL,CC_EMAIL,
                 BCC_EMAIL,SMTP_HOST,SMTP_PORT,SMTP_TYPE,NEED_AUTH,USERNAME,PASSWORD,
                 MOBILE,SMS_GW1,SMS_GW2,SMS_GW3,SMS_GW4
          FROM pass.EMAIL_SETTING
          WHERE ROWNUM<2;
       RETURN m_cursor;
   END Get_Email_Setting;
   
   PROCEDURE
       Update_Email_Setting(in_UserTranID IN pass.AABUsers.UserTranID%TYPE,
                            in_SENDER_EMAIL IN EMAIL_SETTING.SENDER_EMAIL%TYPE,
                            in_CC_EMAIL IN EMAIL_SETTING.CC_EMAIL%TYPE,
                            in_BCC_EMAIL IN EMAIL_SETTING.BCC_EMAIL%TYPE,
                            in_SMTP_HOST IN EMAIL_SETTING.SMTP_HOST%TYPE,
                            in_SMTP_PORT IN EMAIL_SETTING.SMTP_PORT%TYPE,
                            in_SMTP_TYPE IN EMAIL_SETTING.SMTP_TYPE%TYPE,
                            in_NEED_AUTH IN EMAIL_SETTING.NEED_AUTH%TYPE,
                            in_USERNAME IN EMAIL_SETTING.USERNAME%TYPE,
                            in_PASSWORD IN EMAIL_SETTING.PASSWORD%TYPE,
                            in_MOBILE IN EMAIL_SETTING.MOBILE%TYPE,
                            in_SMS_GW1 IN EMAIL_SETTING.SMS_GW1%TYPE,
                            in_SMS_GW2 IN EMAIL_SETTING.SMS_GW2%TYPE,
                            in_SMS_GW3 IN EMAIL_SETTING.SMS_GW3%TYPE,
                            in_SMS_GW4 IN EMAIL_SETTING.SMS_GW4%TYPE)
   AS
   m_UserID pass.AABUsers.UserID%TYPE;
   m_UserTypeGrp pass.AABUserType.UserTypeGrp%TYPE;
   v_OldFields varchar2(2000) := NULL;
   v_NewFields varchar2(2000) := NULL;
   BEGIN
      BEGIN
         SELECT /*+ INDEX(A AABUSERS_PK) INDEX(B AABUSERTYPE_PK) */ A.USERID,B.USERTYPEGRP INTO m_UserID,m_UserTypeGrp
                FROM AABUSERS A,AABUSERTYPE B WHERE B.USERTYPEDESC=A.USERTYPEDESC AND A.USERTRANID=in_UserTranID;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         m_UserID:='Unknown';
         m_UserTypeGrp:='PCHC';
      END;
      BEGIN
          SELECT /*+ index(SENDER_EMAIL SENDER_EMAIL_PK) */ SENDER_EMAIL ||'^'|| NVL(CC_EMAIL,' ') ||'^'||
                 NVL(BCC_EMAIL,' ') ||'^'|| SMTP_HOST ||'^'|| TO_CHAR(SMTP_PORT) ||'^'|| SMTP_TYPE||'^'|| NEED_AUTH ||'^'||
                 NVL(USERNAME,' ') ||'^'|| NVL(PASSWORD,' ') ||'^'|| NVL(MOBILE,' ') ||'^'|| NVL(SMS_GW1,' ') ||'^'|| NVL(SMS_GW2,' ') ||'^'|| NVL(SMS_GW3,' ') ||'^'|| NVL(SMS_GW4,' ')
                 INTO v_OldFields
          FROM pass.EMAIL_SETTING
          WHERE ROWNUM<2;
      EXCEPTION WHEN NO_DATA_FOUND THEN
         v_OldFields:=NULL;
      END;
      v_NewFields:=in_SENDER_EMAIL ||'^'|| NVL(in_CC_EMAIL,' ') ||'^'|| NVL(in_BCC_EMAIL,' ') ||'^'|| in_SMTP_HOST ||'^'|| TO_CHAR(in_SMTP_PORT)
                   ||'^'|| in_SMTP_TYPE ||'^'|| in_NEED_AUTH ||'^'|| NVL(in_USERNAME,' ') ||'^'|| NVL(in_PASSWORD,' ') ||'^'|| NVL(in_MOBILE,' ') ||'^'|| NVL(in_SMS_GW1,' ') ||'^'|| NVL(in_SMS_GW2,' ') ||'^'|| NVL(in_SMS_GW3,' ') ||'^'|| NVL(in_SMS_GW4,' ');
      IF v_NewFields<>NVL(v_OldFields,' ') THEN
         BEGIN
            IF v_OldFields IS NULL THEN
               INSERT INTO EMAIL_SETTING(SENDER_EMAIL,CC_EMAIL,BCC_EMAIL,SMTP_HOST,SMTP_PORT,SMTP_TYPE,NEED_AUTH,USERNAME,PASSWORD,MOBILE,SMS_GW1,SMS_GW2,SMS_GW3,SMS_GW4)
                      VALUES(in_SENDER_EMAIL,in_CC_EMAIL,in_BCC_EMAIL,in_SMTP_HOST,in_SMTP_PORT,
                      in_SMTP_TYPE,in_NEED_AUTH,in_USERNAME,in_PASSWORD,in_MOBILE,in_SMS_GW1,in_SMS_GW2,in_SMS_GW3,in_SMS_GW4);
            ELSE
               UPDATE /*+ index(SENDER_EMAIL SENDER_EMAIL_PK) */ EMAIL_SETTING SET SENDER_EMAIL=in_SENDER_EMAIL,
                      CC_EMAIL=in_CC_EMAIL,BCC_EMAIL=in_BCC_EMAIL,SMTP_HOST=in_SMTP_HOST,SMTP_PORT=in_SMTP_PORT,
                      SMTP_TYPE=in_SMTP_TYPE,NEED_AUTH=in_NEED_AUTH,USERNAME=in_USERNAME,PASSWORD=in_PASSWORD,
                      MOBILE=in_MOBILE,SMS_GW1=in_SMS_GW1,SMS_GW2=in_SMS_GW2,SMS_GW3=in_SMS_GW3,SMS_GW4=in_SMS_GW4
                      WHERE ROWNUM<2;
            END IF;
         EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            UPDATE /*+ index(SENDER_EMAIL SENDER_EMAIL_PK) */ EMAIL_SETTING
                   SET CC_EMAIL=in_CC_EMAIL,BCC_EMAIL=in_BCC_EMAIL,SMTP_HOST=in_SMTP_HOST,SMTP_PORT=in_SMTP_PORT,
                   SMTP_TYPE=in_SMTP_TYPE,NEED_AUTH=in_NEED_AUTH,USERNAME=in_USERNAME,PASSWORD=in_PASSWORD,
                   MOBILE=in_MOBILE,SMS_GW1=in_SMS_GW1,SMS_GW2=in_SMS_GW2,SMS_GW3=in_SMS_GW3,SMS_GW4=in_SMS_GW4
                   WHERE SENDER_EMAIL=in_SENDER_EMAIL;
         END;
         IF v_OldFields IS NULL THEN
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','ADD','EMAIL SETTING CREATED',SYSDATE,'',v_OldFields,v_NewFields);
         ELSE
            INSERT INTO eventlog (Initiator,UserGroup,ActionClass,Action,ActionDetails,EventTimeStamp,IPAddress, OldFieldValues, NewFieldValues)
                   VALUES(m_UserID,m_UserTypeGrp,'ADMINISTRATION','EDIT','EMAIL SETTING UPDATED',SYSDATE,'',v_OldFields,v_NewFields);
         END IF;
      END IF;
   END Update_Email_Setting;

   FUNCTION Get_xmlManager_Limits RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
          SELECT /*+ index(XMLmanager_Limit XMLmanager_Limit_PK) */ Limit_Name,Limit_Value
          FROM pass.XMLmanager_Limit
          ORDER BY Limit_Name;
       RETURN m_cursor;
   END Get_xmlManager_Limits;

   PROCEDURE Update_XMLManager_Limit(in_Limit_Name IN XMLmanager_Limit.Limit_Name%TYPE,
                                     in_Limit_Value IN XMLmanager_Limit.Limit_Value%TYPE)
   AS
   m_Status XMLManager_BOC_Status_Log.STATUS%TYPE;
   BEGIN
      UPDATE /*+ index(XMLmanager_Limit XMLmanager_Limit_PK) */ pass.XMLManager_Limit
             SET Limit_Value=in_Limit_Value WHERE Limit_Name=in_Limit_Name;
      IF SQL%ROWCOUNT<1 THEN
         INSERT INTO pass.XMLManager_Limit(Limit_Name,Limit_Value) VALUES(in_Limit_Name,in_Limit_Value);
      END IF;
      IF in_Limit_Name='Max Sent-To-BOC' AND in_Limit_Value<1 THEN
          BEGIN
             SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ STATUS INTO m_Status
                    FROM XMLManager_BOC_Status_Log WHERE LOG_DATE=
                    (SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ MAX(LOG_DATE)
                    FROM XMLManager_BOC_Status_Log);
             IF m_Status='S' THEN
                INSERT INTO XMLManager_BOC_Status_Log(Status) VALUES('R');
             END IF;
          EXCEPTION WHEN NO_DATA_FOUND THEN
             NULL;
          END;
      END IF;
      COMMIT;
   END Update_XMLManager_Limit;

   FUNCTION Get_XMLManager_BOC_Status_Log RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
          SELECT /*+ index(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ Log_Date,Status
          FROM pass.XMLManager_BOC_Status_Log
          ORDER BY Log_Date DESC;
       RETURN m_cursor;
   END Get_XMLManager_BOC_Status_Log;

   
   FUNCTION Get_xmlManager_Sent(o_numrows OUT NUMBER) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN
       SELECT /*+ index(XMLmanager_Sent XMLmanager_Sent_NDX) */ COUNT(RefTranID) INTO o_numrows FROM pass.XMLmanager_Sent;
       OPEN m_cursor FOR
          SELECT /*+ index(XMLmanager_Sent XMLmanager_Sent_NDX2) */ RefTranID,CustomsClientNumber,AABRefNo,Key,MessageType,TO_CHAR(BAPconfirmDate,'fmMon dd, yyyy ')||TO_CHAR(BAPconfirmDate,'HH12:MI:SS AM') BAPconfirmDate
          FROM pass.XMLmanager_Sent
          WHERE EXISTS(SELECT /*+ index(ActivityMonitor ActivityMonitor_NDX) */ RefTranID FROM ActivityMonitor WHERE RefTranID=XMLmanager_Sent.RefTranID)
          ORDER BY BAPConfirmDate DESC;
       RETURN m_cursor;
   END Get_xmlManager_Sent;

   PROCEDURE Update_ActivityMonitor4Resend(in_RefTranID IN ActivityMonitor.RefTranID%TYPE)
   AS
   BEGIN
      UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor SET PCHCSENTDATE=NULL,BOCCONFIRMSTAT=NULL WHERE RefTranID=in_RefTranID;
   END Update_ActivityMonitor4Resend;

   PROCEDURE
       AM_InsertXMLQueDB (in_RefTranID IN XMLmanager.RefTranID%TYPE,
                        in_CustomsClientNumber IN XMLmanager.CustomsClientNumber%TYPE,
                        in_AABRefNo IN XMLmanager.AABRefNo%TYPE,
                        in_MessageType IN XMLmanager.MessageType%TYPE,
                        in_Key IN XMLmanager.Key%TYPE,
                        in_XMLFileID IN XMLmanager.XMLFileID%TYPE,
                        in_HashValue IN XMLmanager.XMLHashValue%TYPE,
                        in_GZIPXMLFile IN XMLmanager.GZIPXMLFile%TYPE,
                        in_XMLTimeStamp IN XMLmanager.XMLTimeStamp%TYPE
                        )
   AS
      xCount NUMBER;
   BEGIN
      SELECT /*+ index(XMLmanager XMLmanager_PK) */ count(RefTranID) INTO xCount
         FROM XMLmanager WHERE RefTranID = in_RefTranID
                AND  CustomsClientNumber = in_CustomsClientNumber
                AND  AABRefNo = in_AABRefNo
                AND  XMLFileID = in_XMLFileID
                AND  MessageType = in_MessageType;
       IF xCount = 0 THEN
          INSERT INTO XMLmanager
             (RefTranID,CustomsClientNumber,AABRefNo,XMLFileID,BAPConfirmDate,MessageType,Key,XMLHashValue,GZIPXMLFile,XMLTimeStamp)
          VALUES(in_RefTranID,in_CustomsClientNumber,in_AABRefNo,in_XMLFileID,CURRENT_DATE,in_MessageType,in_Key,in_HashValue,in_GZIPXMLFile,in_XMLTimeStamp);
       END IF;
   END AM_InsertXMLQueDB;


   FUNCTION
       Get_XMLManager_Que(o_numfound OUT NUMBER) RETURN types.ref_cursor
   AS
   m_Max_Sent NUMBER;
   m_Max_Age NUMBER;
   m_Rows NUMBER;
   m_Excess NUMBER;
   m_Count NUMBER;
   m_Stat_Minute NUMBER:=5; -- Save statistics every 5 minutes
   m_Stat_Type XMLManager_Statistic.Stat_Type%TYPE:='XSDEF'; -- XML Send Deferred
   m_Stat_Date XMLManager_Statistic.Stat_Date%TYPE;
   m_Stat_Value XMLManager_Statistic.Stat_Value%TYPE;
   m_Status XMLManager_BOC_Status_Log.Status%TYPE;
   m_COMMIT BOOLEAN;
   m_cursor types.ref_cursor;
   BEGIN
       m_Excess:=0;
       m_COMMIT:=FALSE;
       BEGIN
          SELECT Limit_Value INTO m_Max_Sent FROM XMLmanager_Limit WHERE Limit_Name='Max Sent-To-BOC';
       EXCEPTION WHEN NO_DATA_FOUND THEN
          m_Max_Sent:=0;
       END;
       BEGIN
          SELECT Limit_Value INTO m_Max_Age FROM XMLmanager_Limit WHERE Limit_Name='Max Tran Age';
       EXCEPTION WHEN NO_DATA_FOUND THEN
          m_Max_Age:=0;
       END;
       m_Count:=0;
       IF m_Max_Sent>0 THEN
          IF m_Max_Age>0 THEN

             -- SELECT /*+ INDEX(HistoricalPayTransactions HistoricalPayTransactions_NDX3) */ COUNT(PayTranID) INTO m_Rows FROM pass.HistoricalPayTransactions
             --        WHERE PCHCSentDate IS NOT NULL AND BOCConfirmDate IS NULL AND (SYSDATE-PCHCSentDate)<=(m_Max_Age*0.000694444444444444) AND ROWNUM<(m_Max_Sent+1);

        SELECT /*+ INDEX(ACTIVITYMONITOR ACTIVITYMONITOR_NDX) */ COUNT(REFTRANID) INTO m_Rows FROM pass.ACTIVITYMONITOR
             WHERE (SYSDATE-BAPCONFIRMDATE)<=(m_Max_Age*0.000694444444444444) AND ROWNUM<(m_Max_Sent+1);

          ELSE

             -- SELECT /*+ INDEX(HistoricalPayTransactions HistoricalPayTransactions_NDX3) */ COUNT(PayTranID) INTO m_Rows FROM pass.HistoricalPayTransactions
             --        WHERE PCHCSentDate IS NOT NULL AND BOCConfirmDate IS NULL AND ROWNUM<(m_Max_Sent+1);

        SELECT /*+ INDEX(ACTIVITYMONITOR ACTIVITYMONITOR_NDX) */ COUNT(REFTRANID) INTO m_Rows FROM pass.ACTIVITYMONITOR
             WHERE ROWNUM<(m_Max_Sent+1);

          END IF;

          BEGIN
             SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ STATUS INTO m_Status
                    FROM XMLManager_BOC_Status_Log WHERE LOG_DATE=
                    (SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ MAX(LOG_DATE)
                    FROM XMLManager_BOC_Status_Log);
             IF m_Status='S' THEN
                IF m_Max_Sent>0 THEN
                   IF m_Rows<(m_Max_Sent/2) THEN
                      INSERT INTO XMLManager_BOC_Status_Log(Status) VALUES('R');
                      m_COMMIT:=TRUE;
                   END IF;
                ELSE
                   INSERT INTO XMLManager_BOC_Status_Log(Status) VALUES('R');
                   m_COMMIT:=TRUE;
                END IF;
             END IF;
          EXCEPTION WHEN NO_DATA_FOUND THEN
             NULL;
          END;

          IF m_Rows<m_Max_Sent THEN
             m_Rows:=m_Max_Sent-m_Rows;
          ELSE
             m_Rows:=0;
          END IF;
          m_Rows:=m_Rows+1;
          SELECT /*+ index(XMLmanager XMLmanager_PK) */ COUNT(RefTranID) INTO m_Count FROM pass.XMLmanager;
          m_Excess:=m_Count;
          IF m_Excess<m_Rows THEN
             m_Excess:=0;
             SELECT /*+ index(XMLmanager XMLmanager_PK) */ COUNT(RefTranID) INTO o_numfound FROM pass.XMLmanager;
             OPEN m_cursor FOR
                SELECT /*+ index(XMLmanager XMLmanager_NDX) */ RefTranID,CustomsClientNumber,AABRefNo,BAPConfirmDate,XMLTimeStamp,MessageType,XMLFileID,GZIPXMLFile
                FROM pass.XMLmanager ORDER BY BAPConfirmDate;
             RETURN m_cursor;
          ELSE
             SELECT /*+ index(XMLmanager XMLmanager_PK) */ COUNT(RefTranID) INTO o_numfound FROM pass.XMLmanager WHERE ROWNUM<m_Rows;
             IF m_Excess>o_numfound THEN
                m_Excess:=m_Excess-o_numfound;
                -- Save to per 5 minutes statistics
                m_Stat_Date:=TO_DATE(TO_CHAR(SYSDATE,'YYYY-MON-DD HH24:')||TO_CHAR(Floor(TO_Number(TO_Char(SysDate,'MI'))/m_Stat_Minute)*m_Stat_Minute,'00'),'YYYY-MON-DD HH24:MI');
                BEGIN
                   SELECT /*+ INDEX(XMLManager_Statistic XMLManager_Statistic_PK) */ Stat_Value INTO m_Stat_Value
                          FROM pass.XMLManager_Statistic WHERE Stat_Type=m_Stat_Type AND Stat_Date=m_Stat_Date;
                   IF m_Excess>m_Stat_Value THEN
                      UPDATE /*+ INDEX(XMLManager_Statistic XMLManager_Statistic_PK) */ pass.XMLManager_Statistic
                             SET Stat_Value=m_Excess WHERE Stat_Type=m_Stat_Type AND Stat_Date=m_Stat_Date;
                      m_COMMIT:=TRUE;
                   END IF;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                   INSERT INTO XMLManager_Statistic(Stat_Type,Stat_Date,Stat_Value)
                          VALUES(m_Stat_Type,m_Stat_Date,m_Excess);
                   m_COMMIT:=TRUE;
                END;

          BEGIN
             SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ STATUS INTO m_Status
                    FROM XMLManager_BOC_Status_Log WHERE LOG_DATE=
                    (SELECT /*+ INDEX(XMLManager_BOC_Status_Log XMLManager_BOC_Status_Log_PK) */ MAX(LOG_DATE)
                    FROM XMLManager_BOC_Status_Log);
             IF m_Status='R' THEN
                INSERT INTO XMLManager_BOC_Status_Log(Status) VALUES('S');
                m_COMMIT:=TRUE;
             END IF;
          EXCEPTION WHEN NO_DATA_FOUND THEN
             INSERT INTO XMLManager_BOC_Status_Log(Status) VALUES('S');
             m_COMMIT:=TRUE;
          END;

                OPEN m_cursor FOR
                   SELECT RefTranID,CustomsClientNumber,AABRefNo,BAPConfirmDate,XMLTimeStamp,MessageType,XMLFileID,GZIPXMLFile FROM
                   (SELECT /*+ index(XMLmanager XMLmanager_NDX) */ RefTranID,CustomsClientNumber,AABRefNo,BAPConfirmDate,XMLTimeStamp,MessageType,XMLFileID,GZIPXMLFile
                   FROM pass.XMLmanager ORDER BY BAPConfirmDate) WHERE ROWNUM<m_Rows;
                RETURN m_cursor;
             ELSE
                m_Excess:=0;
                OPEN m_cursor FOR
                   SELECT /*+ index(XMLmanager XMLmanager_NDX) */ RefTranID,CustomsClientNumber,AABRefNo,BAPConfirmDate,XMLTimeStamp,MessageType,XMLFileID,GZIPXMLFile
                   FROM pass.XMLmanager ORDER BY BAPConfirmDate;
                RETURN m_cursor;
             END IF;
          END IF;
       ELSE
          SELECT /*+ index(XMLmanager XMLmanager_PK) */ COUNT(RefTranID) INTO o_numfound FROM pass.XMLmanager;
          OPEN m_cursor FOR
             SELECT /*+ index(XMLmanager XMLmanager_NDX) */ RefTranID,CustomsClientNumber,AABRefNo,BAPConfirmDate,XMLTimeStamp,MessageType,XMLFileID,GZIPXMLFile
             FROM pass.XMLmanager ORDER BY BAPConfirmDate;
          RETURN m_cursor;
       END IF;
       IF m_COMMIT THEN
          COMMIT;
       END IF;
   END Get_XMLManager_Que;

   PROCEDURE
       Update_XMLManager_Que(in_RefTranId  IN XMLmanager.RefTranID%TYPE,
                             in_CustomsClientNumber IN XMLmanager.CustomsClientNumber%TYPE,
                             in_AABRefNo IN XMLmanager.AABRefNo%TYPE,
                             in_XMLFileID IN XMLmanager.XMLFileID%TYPE,
                             in_MessageType IN XMLmanager.MessageType%TYPE,
                             out_RowCount OUT NUMBER)
   AS
   BEGIN
       INSERT INTO ActivityMonitor
         (RefTranID,CustomsClientNumber,AABRefNo,XMLFileID,BAPConfirmDate,MessageType,Key)
         SELECT /*+ index(XMLmanager XMLmanager_PK) */ RefTranID,CustomsClientNumber,AABRefNo,XMLFileID,BAPConfirmDate,MessageType,Key
         FROM XMLmanager WHERE RefTranID = in_RefTranID
                AND  CustomsClientNumber = in_CustomsClientNumber
                AND  AABRefNo = in_AABRefNo
                AND  XMLFileID = in_XMLFileID
                AND  MessageType = in_MessageType;
      out_RowCount:=SQL%ROWCOUNT;
      IF out_RowCount>0 THEN
         DELETE /*+ index(XMLmanager XMLmanager_PK) */ FROM XMLmanager WHERE RefTranID = in_RefTranID
                AND  CustomsClientNumber = in_CustomsClientNumber
                AND  AABRefNo = in_AABRefNo
                AND  XMLFileID = in_XMLFileID
                AND  MessageType = in_MessageType;
      END IF;
   EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
      out_RowCount:=0;
   END Update_XMLManager_Que;

   FUNCTION
       Get_VASPD_Admin_Status RETURN types.ref_cursor
   IS
   m_cursor types.ref_cursor;
   BEGIN
       OPEN m_cursor FOR
          SELECT /*+ index(VASPD_Admin VASPD_Admin_PK) */ ((SYSDATE-LAST_UPDATE)*86400) LAPSED,LAST_UPDATE,VASPD_STATUS,LEASED_LINE_STATUS,INTERNET_STATUS,CURRENT_CONNECTION,CHANGE_CONNECTION,CHANGE_STATUS
          FROM pass.VASPD_Admin WHERE ROWNUM<2 ORDER BY LAST_UPDATE DESC;
       RETURN m_cursor;
   END Get_VASPD_Admin_Status;

   PROCEDURE Update_VASPD_Admin_Status(in_VASPD_STATUS IN VASPD_Admin.VASPD_STATUS%TYPE,
                                       in_LEASED_LINE_STATUS IN VASPD_Admin.LEASED_LINE_STATUS%TYPE,
                                       in_INTERNET_STATUS IN VASPD_Admin.LEASED_LINE_STATUS%TYPE,
                                       in_CURRENT_CONNECTION IN VASPD_Admin.CURRENT_CONNECTION%TYPE)
   AS
   BEGIN
      UPDATE /*+ index(VASPD_Admin VASPD_Admin_PK) */ pass.VASPD_Admin SET LAST_UPDATE=SYSDATE,VASPD_STATUS=in_VASPD_STATUS,LEASED_LINE_STATUS=in_LEASED_LINE_STATUS,
             INTERNET_STATUS=in_INTERNET_STATUS,CURRENT_CONNECTION=in_CURRENT_CONNECTION WHERE ROWNUM<2;
   END Update_VASPD_Admin_Status;

   PROCEDURE Update_VASPD_Admin_Request(in_CHANGE_CONNECTION IN VARCHAR2,
                                       in_CHANGE_STATUS IN VARCHAR2)
   IS
   pCHANGE_CONNECTION VASPD_Admin.CHANGE_CONNECTION%TYPE;
   pCHANGE_STATUS VASPD_Admin.CHANGE_STATUS%TYPE;
   pVALUE NUMBER;
   BEGIN
      IF in_CHANGE_CONNECTION IS NOT NULL AND in_CHANGE_CONNECTION IN('Max Sent-To-BOC','Max Tran Age') THEN
         IF in_CHANGE_STATUS IS NOT NULL THEN
            BEGIN
               pVALUE:=TO_NUMBER(in_CHANGE_STATUS);
            EXCEPTION WHEN VALUE_ERROR OR INVALID_NUMBER THEN
               pVALUE:=0;
            END;
         ELSE
            pVALUE:=0;
         END IF;
         Update_XMLManager_Limit(in_CHANGE_CONNECTION,pVALUE);
      ELSE
         BEGIN
            SELECT /*+ index(VASPD_Admin VASPD_Admin_PK) */ CHANGE_CONNECTION,CHANGE_STATUS INTO pCHANGE_CONNECTION,pCHANGE_STATUS FROM pass.VASPD_Admin WHERE ROWNUM<2 ORDER BY LAST_UPDATE DESC;
         EXCEPTION WHEN NO_DATA_FOUND THEN
            pCHANGE_CONNECTION:=NULL;
            pCHANGE_STATUS:=NULL;
         END;
         IF in_CHANGE_CONNECTION IS NOT NULL THEN
            IF in_CHANGE_CONNECTION=' ' THEN
               pCHANGE_CONNECTION:=NULL;
            ELSE
               pCHANGE_CONNECTION:=in_CHANGE_CONNECTION;
            END IF;
         END IF;
         IF in_CHANGE_STATUS IS NOT NULL THEN
            IF in_CHANGE_STATUS=' ' THEN
               pCHANGE_STATUS:=NULL;
            ELSE
               pCHANGE_STATUS:=in_CHANGE_STATUS;
            END IF;
         END IF;
         IF in_CHANGE_CONNECTION IS NOT NULL OR in_CHANGE_STATUS IS NOT NULL THEN
            UPDATE pass.VASPD_Admin SET CHANGE_CONNECTION=pCHANGE_CONNECTION,CHANGE_STATUS=pCHANGE_STATUS WHERE ROWNUM<2;
         END IF;
      END IF;
   END Update_VASPD_Admin_Request;

   -- (added) end

   FUNCTION
       AM_GetXMLFromQue(o_numfound OUT NUMBER) RETURN types.ref_cursor
   AS
   m_cursor types.ref_cursor;
   BEGIN

       OPEN m_cursor FOR
          SELECT /*+ index(ActivityMonitor ActivityMonitor_NDX) */ XMLFileID,XMLHashValue,Key,MessageType,RefTranID,CustomsClientNumber,AABRefNo
          FROM pass.ActivityMonitor
          WHERE BOCCONFIRMSTAT IS NULL AND
                ( PCHCSentDate IS NULL OR
                ( PCHCSentDate IS NOT NULL
                  AND CPIConfirmDate IS NULL
                  AND  ( nvl(PCHCSentDate, to_date('01/01/1900 00:00:01','mm-dd-yyyy hh24:mi:ss')) + (10/1440) < CURRENT_DATE) ) );

       RETURN m_cursor;
   END AM_GetXMLFromQue;




   PROCEDURE AM_StampError(in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                           in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                           in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                           in_MessageType IN ActivityMonitor.MessageType%TYPE)
   AS
   BEGIN

      UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor
         SET BOCConfirmStat = 'FALSE'
      WHERE RefTranID = in_RefTranID
         AND CustomsClientNumber = in_CustomsClientNumber
         AND AABRefNo = in_AABRefNo
         AND MessageType = in_MessageType;
   END AM_StampError;


   PROCEDURE AM_UpdateXMLQue(in_RefTranID IN ActivityMonitor.RefTranID%TYPE)
   AS
   BEGIN

      UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor
         SET CPIConfirmDate = CURRENT_DATE
      WHERE RefTranID = in_RefTranID;
      COMMIT WRITE IMMEDIATE;
   END AM_UpdateXMLQue;



   FUNCTION
       AM_RemoveFromQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                         in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                         in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                         in_BOCConfirmID IN VARCHAR2) RETURN NUMBER
   AS
   m_cursor types.ref_cursor;
   m_temptab ActivityMonitor%ROWTYPE;
   m_date date;
   BEGIN
       m_date := CURRENT_DATE;

       BEGIN
          UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor SET
             BOCConfirmDate = m_date,
             BOCConfirmStat = 'OK'
          WHERE RefTranID = in_RefTranID
             AND CustomsClientNumber = in_CustomsClientNumber
             AND AABRefNo = in_AABRefNo;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
             RETURN 0;
       END;

       BEGIN
          OPEN m_cursor FOR
             SELECT /*+ index(ActivityMonitor ActivityMonitor_NDX) */ RefTranID,
                    CustomsClientNumber,
                    AABRefNo,
                    ImportEntryDecNo,
                    BAPConfirmDate,
                    PCHCSentDate,
                    CPIConfirmDate,
                    BOCConfirmDate,
                    BOCConfirmStat,
                    MessageType,
                    Key,
                    XMLFileID,
                    XMLHashValue
             FROM pass.ActivityMonitor
             WHERE CustomsClientNumber = in_CustomsClientNumber
                AND AABRefNo = in_AABRefNo
                AND RefTranID = in_RefTranID;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
             RETURN 0;
       END;

       IF m_cursor%ISOPEN THEN
          FETCH m_cursor INTO m_temptab;
             IF m_cursor%FOUND THEN
                INSERT INTO ActivityMonitorHistory
                   (RefTranID,
                    CustomsClientNumber,
                    AABRefNo,
                    ImportEntryDecNo,
                    BAPConfirmDate,
                    PCHCSentDate,
                    CPIConfirmDate,
                    BOCConfirmDate,
                    BOCConfirmStat,
                    MessageType,
                    Key,
                    XMLFileID,
                    XMLHashValue)
                VALUES
                   (m_temptab.RefTranID,
                    m_temptab.CustomsClientNumber,
                    m_temptab.AABRefNo,
                    m_temptab.ImportEntryDecNo,
                    m_temptab.BAPConfirmDate,
                    m_temptab.PCHCSentDate,
                    m_temptab.CPIConfirmDate,
                    m_temptab.BOCConfirmDate,
                    m_temptab.BOCConfirmStat,
                    m_temptab.MessageType,
                    m_temptab.Key,
                    m_temptab.XMLFileID,
                    m_temptab.XMLHashValue);

                IF TRIM(m_temptab.MessageType) IN ('AP','FP') THEN

                   UPDATE /*+ index(HistoricalPayTransactions HistoricalPayTransactions_PK) */ HistoricalPayTransactions SET
                      PCHCSentDate = m_temptab.PCHCSentDate,    -- inserted 09/25/2009
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmID = in_BOCConfirmID,
                      BOCConfirmRecvDate = m_date,
                        BOCStat = 'OK'
                   WHERE PayTranId = m_temptab.RefTranId
                      AND AABRefNo = m_temptab.AABRefNo;

                   UPDATE /*+ index(PaymentTransactions PaymentTransactions_PK) */ PaymentTransactions SET
                      PCHCSentDate = m_temptab.PCHCSentDate
                   WHERE PayTranID = m_temptab.RefTranID
                        AND AABRefNo = m_temptab.AABRefNo;


                ELSIF m_temptab.MessageType = 'CIR' THEN

                   UPDATE /*+ index(Enrollment Enrollment_PK) */ Enrollment SET
                      PCHCSentDate = m_temptab.PCHCSentDate,
                      BOCTranID = in_BOCConfirmID,
                      ReasonCode = '',
                      ConfirmationCode = 'ACCEPTED',
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmRecvDate = m_date
                   WHERE CustomsClientNumber = m_temptab.CustomsClientNumber
                      AND AABRefNo = m_temptab.AABRefNo
                      AND AABTranID = m_temptab.RefTranID;

                ELSIF m_temptab.MessageType = 'LCC' THEN

                   UPDATE /*+ index(LCCancellation LCCancellation_PK) */ LCCancellation SET
                      PCHCSentDate = m_temptab.PCHCSentDate,
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmRecvDate = m_date,
                      BOCStat = 'OK',
                      ErrorMsg = null
                   WHERE LCCancelTranID = m_temptab.RefTranID
                      AND AABRefNo = m_temptab.AABRefNo;

                END IF;
             END IF;

          CLOSE m_cursor;

          DELETE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ FROM pass.ActivityMonitor
          WHERE CustomsClientNumber = in_CustomsClientNumber
             AND AABRefNo = in_AABRefNo
             AND RefTranID = in_RefTranID;

          RETURN 1;
       ELSE
          RETURN 0;
       END IF;

   END AM_RemoveFromQue;


   FUNCTION
       AM_RemoveErrorQue (in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                          in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                          in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                          in_BOCConfirmID IN VARCHAR2,
                          in_ErrorMessage IN VARCHAR2) RETURN NUMBER
   AS
   m_cursor types.ref_cursor;
   m_temptab ActivityMonitor%ROWTYPE;
   m_date date;
   BEGIN
       m_date := CURRENT_DATE;

       UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor SET
          BOCConfirmDate = m_date,
          BOCConfirmStat = 'FALSE'
       WHERE RefTranID = in_RefTranID
          AND CustomsClientNumber = in_CustomsClientNumber
          AND AABRefNo = in_AABRefNo;

       OPEN m_cursor FOR

          SELECT /*+ index(ActivityMonitor ActivityMonitor_NDX) */ RefTranID,
                 CustomsClientNumber,
                 AABRefNo,
                 ImportEntryDecNo,
                 BAPConfirmDate,
                 PCHCSentDate,
                 CPIConfirmDate,
                 BOCConfirmDate,
                 BOCConfirmStat,
                 MessageType,
                 Key,
                 XMLFileID,
                 XMLHashValue
          FROM pass.ActivityMonitor
          WHERE CustomsClientNumber = in_CustomsClientNumber
             AND AABRefNo = in_AABRefNo
             AND RefTranID = in_RefTranID;

       IF m_cursor%ISOPEN THEN
          FETCH m_cursor INTO m_temptab;
             IF m_cursor%FOUND THEN
                INSERT INTO ActivityMonitorHistory
                   (RefTranID,
                    CustomsClientNumber,
                    AABRefNo,
                    ImportEntryDecNo,
                    BAPConfirmDate,
                    PCHCSentDate,
                    CPIConfirmDate,
                    BOCConfirmDate,
                    BOCConfirmStat,
                    MessageType,
                    Key,
                    XMLFileID,
                    XMLHashValue)
                VALUES
                   (m_temptab.RefTranID,
                    m_temptab.CustomsClientNumber,
                    m_temptab.AABRefNo,
                    m_temptab.ImportEntryDecNo,
                    m_temptab.BAPConfirmDate,
                    m_temptab.PCHCSentDate,
                    m_temptab.CPIConfirmDate,
                    m_temptab.BOCConfirmDate,
                    m_temptab.BOCConfirmStat,
                    m_temptab.MessageType,
                    m_temptab.Key,
                    m_temptab.XMLFileID,
                    m_temptab.XMLHashValue);

                IF m_temptab.MessageType IN ('AP','FP') THEN

                   UPDATE /*+ index(HistoricalPayTransactions HistoricalPayTransactions_PK) */ HistoricalPayTransactions SET
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmID = in_BOCConfirmID,
                        BOCStat = 'FALSE',
                      BOCConfirmRecvDate = m_date,
                      ErrorMsg = in_ErrorMessage,
                      Pchcsentdate = m_temptab.PCHCSentDate
                   WHERE TRIM(ImportEntryDecNo) = TRIM(m_temptab.Key)
                      AND AABRefNo = m_temptab.AABRefNo
                      AND PayTranId = m_temptab.RefTranId;

                   UPDATE /*+ index(PaymentTransactions PaymentTransactions_PK) */ PaymentTransactions SET
                      PCHCSentDate = m_temptab.PCHCSentDate
                   WHERE TRIM(ImportEntryDecNo) = TRIM(m_temptab.Key)
                      AND AABRefNo = m_temptab.AABRefNo
                      AND PayTranID = m_temptab.RefTranID;

                ELSIF m_temptab.MessageType = 'CIR' THEN

                   UPDATE /*+ index(Enrollment Enrollment_PK) */ Enrollment SET
                      BOCTranID = in_BOCConfirmID,
                      ReasonCode = in_ErrorMessage,
                      ConfirmationCode = 'REJECTED',
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmRecvDate = m_date,
                      PCHCSentDate = m_temptab.PCHCSentDate
                   WHERE CustomsClientNumber = m_temptab.CustomsClientNumber
                      AND AABRefNo = m_temptab.AABRefNo
                      AND AABTranID = m_temptab.RefTranID;

                ELSIF m_temptab.MessageType = 'LCC' THEN

                   UPDATE /*+ index(LCCancellation LCCancellation_PK) */ LCCancellation SET
                      PCHCSentDate = m_temptab.PCHCSentDate,
                      BOCConfirmDate = m_temptab.BOCConfirmDate,
                      BOCConfirmRecvDate = m_date,
                      BOCStat = 'FALSE',
                      ErrorMsg = in_ErrorMessage
                   WHERE LCCancelTranID = m_temptab.RefTranID
                      AND AABRefNo = m_temptab.AABRefNo;

                END IF;
             END IF;

          CLOSE m_cursor;

          DELETE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ FROM pass.ActivityMonitor
          WHERE CustomsClientNumber = in_CustomsClientNumber
             AND AABRefNo = in_AABRefNo
             AND RefTranID = in_RefTranID;

          RETURN 1;
       ELSE
          RETURN 0;
       END IF;

   END AM_RemoveErrorQue;


   PROCEDURE  AM_StampCPISentDate(in_RefTranID IN ActivityMonitor.RefTranID%TYPE,
                                  in_CustomsClientNumber IN ActivityMonitor.CustomsClientNumber%TYPE,
                                  in_AABRefNo IN ActivityMonitor.AABRefNo%TYPE,
                                  in_MessageType IN ActivityMonitor.MessageType%TYPE)
   AS
      m_date date;
   BEGIN
      m_date := CURRENT_DATE;

      UPDATE /*+ index(ActivityMonitor ActivityMonitor_NDX) */ ActivityMonitor
         SET PCHCSentDate = m_date
      WHERE RefTranID = in_RefTranID
         AND CustomsClientNumber = in_CustomsClientNumber
         AND AABRefNo = in_AABRefNo
         AND MessageType = in_MessageType;
      COMMIT WRITE IMMEDIATE;

      IF in_MessageType = 'CIR' THEN

         UPDATE /*+ index(Enrollment Enrollment_PK) */ Enrollment
            SET PCHCSentDate = m_date
         WHERE CustomsClientNumber = in_CustomsClientNumber
            AND AABRefNo = in_AABRefNo
            AND AABTranID = in_RefTranID;

      ELSIF in_MessageType = 'AP' OR in_MessageType = 'FP' THEN

         UPDATE /*+ index(PaymentTransactions PaymentTransactions_PK) */ PaymentTransactions
            SET PCHCSentDate = m_date
         WHERE AABRefNo = in_AABRefNo
            AND CustomsClientNo = in_CustomsClientNumber
            AND PayTranID = in_RefTranID;

      ELSIF in_MessageType = 'LCC' THEN

         UPDATE /*+ index(LCCancellation LCCancellation_PK) */ LCCancellation
            SET PCHCSentDate = m_date
         WHERE LCCancelTranID = in_RefTranID
            AND AABRefNo = in_AABRefNo;

      END IF;

   END AM_StampCPISentDate;


   PROCEDURE AM_WriteCPILog(in_Number IN CPI_Logs.Id_Number%TYPE,
                            in_Type IN CPI_Logs.Type%TYPE,
                            in_AABRefNo IN CPI_Logs.AABRefNo%TYPE,
                            in_Status IN CPI_Logs.Status%TYPE,
                            in_ErrorData IN CPI_Logs.SourceField%TYPE,
                            in_ErrorMessage IN CPI_Logs.ErrorDesc%TYPE,
                            in_ErrorCode IN CPI_Logs.ErrorNum%TYPE)
   IS
   BEGIN
      INSERT INTO CPI_Logs
             (Id_Number,Type,AABRefNo,Status,SourceField,ErrorDesc,ErrorNum)
      VALUES (in_Number,in_Type,in_AABRefNo,in_Status,in_ErrorData,in_ErrorMessage,in_ErrorCode);
   END AM_WriteCPILog;

END p5_vaam;
/
